{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/index_img.jpg","path":"img/index_img.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/tit.jpg","path":"img/tit.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"821fe7541c063f939f4985c696ea0254337eb078","modified":1674886543152},{"_id":"source/_posts/2023美赛建模.md","hash":"cad53ca0308c3495d9d5c355d253541942c2a9d6","modified":1676796971472},{"_id":"source/_posts/MathorCup.md","hash":"93a5de8ec4311fea722f89971f78bc81b2aa9b7f","modified":1677983568026},{"_id":"source/_posts/hello-world.md","hash":"688f2aad3950c9e8a3f66543059ae33a00736925","modified":1674819374478},{"_id":"source/_posts/images-test.md","hash":"0415caaef1de5a0aac8a127a1c9fa9fa8d7d6049","modified":1674874387984},{"_id":"source/_posts/video-test.md","hash":"ce0121a37604ad75cdd9dc9aac1456aeb08500dd","modified":1674965939628},{"_id":"source/link/index.md","hash":"e2b25071bbef2552dcdbb263ea19c2e61f14dd3e","modified":1674824408132},{"_id":"source/about/index.md","hash":"5fd63db786bd1b167ff6c2f495064f00bf582899","modified":1674805718101},{"_id":"source/categories/index.md","hash":"7ba6994ae334773e4a5e622796246ad877da3e35","modified":1674819510584},{"_id":"source/messageboard/index.md","hash":"11505f61ce0dd8cbf5b41bd38d044b533bf8dbc7","modified":1674826391516},{"_id":"source/_posts/Cmake.md","hash":"61395a518609359ffb582a8b1f6ac0ace481332a","modified":1677762684772},{"_id":"source/_posts/蓝桥杯备赛随笔.md","hash":"e57e6f4bbf67cf309fce252e465ccc937aaf3210","modified":1676464442894},{"_id":"source/_posts/大一上总结.md","hash":"440ee0d3fc5ed174c8a23494d0a7c55b3162f045","modified":1674820069892},{"_id":"source/_posts/MathorCup/importance1.jpg","hash":"da09ce819c242daf963437918f385e8bd5e69404","modified":1674960860143},{"_id":"source/tags/index.md","hash":"c5c5bb3fdc442e17c7cd738f694851b2c099fbd7","modified":1674819486791},{"_id":"source/timeline/index.md","hash":"1cb917b9d4beaf729111cf9280a678057a2d38e4","modified":1674805668003},{"_id":"source/myself/index.md","hash":"41173fe39c50a5c03f6710404730339e0591d31c","modified":1674805798607},{"_id":"source/_posts/images-test/touxiang.jpg","hash":"3b8044a57a9aa99d56c1f3b151d35a4e25470823","modified":1674806277644},{"_id":"source/_posts/MathorCup/importance2.jpg","hash":"1dada7719900bd9335c9652302d063833ddb4787","modified":1674960910888},{"_id":"themes/butterfly/_config.yml","hash":"c0413d60847b07bc7a0346ca6e33bb37bb99d7ee","modified":1674965576837},{"_id":"themes/butterfly/package.json","hash":"822d83111feefd6a026b14fedef7871960ab434f","modified":1674799942310},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1674799942260},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1674799942261},{"_id":"themes/butterfly/plugins.yml","hash":"8e3b5e44ff0e7e9c5779234bf21e1e70aeec5ae8","modified":1674799942310},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1674799942260},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1674799942263},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1674799942263},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1674799942262},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1674799942265},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1674799942266},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1674799942308},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1674799942266},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1674799942308},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1674799942268},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1674799942310},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1674799942269},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"bfc28cb79e81f55c09672fb8e4372a71e0994761","modified":1674799942269},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1674799942309},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1674799942270},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1674799942311},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1674799942279},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1674799942312},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1674799942312},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"25cd2d7c4d3f6836a157b73a2442a7712ff40b34","modified":1674799942275},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1674799942312},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1674799942280},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1674799942312},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"5f96a28a4eac046b68ccc10e8c24ab01525e3245","modified":1674799942280},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1674799942315},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1674799942313},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1674799942314},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1674799942313},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1674799942316},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1674799942314},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"40f85785d041b976f47a2828b0dc54346dcb62b0","modified":1674799942316},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1674799942317},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1674799942318},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1674799942318},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ade8ce15cc7f41587e616f8e40f565081aee1c37","modified":1674799942317},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1674799942319},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"bc74b7701ac07ff679b699d63e706935b37a8b7b","modified":1674799942318},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1674799942319},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1674799942319},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1674799942320},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1674799942320},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1674799942321},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1674799942321},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1674799942342},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1674799942343},{"_id":"themes/butterfly/source/css/var.styl","hash":"63f12a6a847738b1479ce782c8caac5e0cf16a6b","modified":1674799942342},{"_id":"themes/butterfly/source/js/utils.js","hash":"85a4f6e680ad2500ed114918158557ed85a8d89a","modified":1674799942347},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1674799942343},{"_id":"themes/butterfly/source/js/main.js","hash":"f049b166073c4bcdccc6d8348774941a4e2c6d7b","modified":1674799942344},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1674799942345},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1674799942277},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1674799942275},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1674799942344},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1674799942276},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1674799942276},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1674799942278},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1674799942277},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1674799942277},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1674799942279},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1674799942278},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1674799942278},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1674799942279},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1674799942270},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1674799942271},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1674799942272},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1674799942271},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1674799942272},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1674799942273},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1674799942273},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1674799942271},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1674799942272},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1674799942274},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1674799942304},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"40efa8e29460746b0d1253ce19b87eb035e25c47","modified":1674799942274},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1674799942274},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1674799942273},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1674799942275},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1674799942305},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1674799942305},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1674799942305},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1674799942307},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1674799942307},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1674799942281},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1674799942308},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1674799942307},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1674799942308},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1674799942293},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1674799942300},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1674799942299},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1674799942299},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1674799942323},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1674799942333},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c424b1a3119ffb8396d80bb3585f48bd6777c917","modified":1674799942323},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7a12719a1ef2bce7d4056f2241251a71e92cd72c","modified":1674799942327},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1674799942333},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1674799942327},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1674799942304},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1674799942324},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1674799942327},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1674799942326},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d33f2d9001a82d9a72d6f4088743762fbd016e4c","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1674799942329},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1674799942330},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1674799942329},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1674799942329},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1674799942330},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1674799942335},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1674799942332},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1674799942334},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1674799942335},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1674799942334},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1674799942336},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1674799942336},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1674799942336},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1674799942337},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"e3e1b234a2595824576b8c9ed87af6d933f4e125","modified":1674799942337},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"72a38c1dad7f55564b02c7a23e6ef39219edcd80","modified":1674799942337},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1674799942339},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1674799942340},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1674799942340},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1674799942338},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1674799942339},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1674799942340},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1674799942340},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1674799942345},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1674799942341},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"af08cc5603c768903747dbce43358329bc0b76dd","modified":1674807182605},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1674799942341},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1674799942294},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1674799942294},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1674799942282},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"44b6d3fb2c9b437d85de751d83e2e92a0830451d","modified":1674799942345},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1674799942283},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1674799942295},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1674799942283},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1674799942294},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1674799942283},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1674799942282},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1674799942285},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1674799942284},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1674799942284},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1674799942285},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1674799942285},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1674799942286},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1674799942286},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1674799942286},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1674799942287},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1674799942287},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1674799942289},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1674799942288},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1674799942289},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1674799942290},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1674799942291},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1674799942290},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1674799942291},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1674799942291},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1674799942293},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1674799942293},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1674799942295},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1674799942296},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1674799942296},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1674799942297},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1674799942297},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1674799942296},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1674799942301},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1674799942302},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1674799942302},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1674799942298},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1674799942302},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1674799942303},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1674799942303},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1674799942303},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1674799942298},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1674799942324},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1674799942325},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1674799942326},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1674799942325},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1674799942326},{"_id":"themes/butterfly/source/img/tit.jpg","hash":"3b8044a57a9aa99d56c1f3b151d35a4e25470823","modified":1674806277644},{"_id":"source/_posts/MathorCup/证书.png","hash":"6d4e6b8cb370b6d8eca086b566ad92e8b2369edf","modified":1677983485217},{"_id":"themes/butterfly/source/img/index_img.jpg","hash":"31931e87b043397571cd95284956236863361133","modified":1674806758405}],"Category":[{"name":"教程","_id":"cleus4b6z0004ywvfgitqfw8u"},{"name":"总结","_id":"cleus4b7i000nywvf3359h8xq"},{"name":"随笔","parent":"cleus4b6z0004ywvfgitqfw8u","_id":"cleus4b7j000sywvffi1x5rmr"}],"Data":[{"_id":"link","data":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}],"Page":[{"title":"关于","date":"2021-02-18T05:58:07.000Z","type":"about","comments":0,"_content":"\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-02-18 13:58:07\ntype: about \ncomments: false\n---\n\n","updated":"2023-01-27T07:48:38.101Z","path":"about/index.html","layout":"page","_id":"cleus4b6k0000ywvf1m9xbecm","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"link","date":"2023-01-27T07:42:53.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-01-27 15:42:53\ntype: \"link\"\n---\n","updated":"2023-01-27T13:00:08.132Z","path":"link/index.html","comments":1,"layout":"page","_id":"cleus4b6v0002ywvf7qpd884w","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"categories","date":"2023-01-27T11:02:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-01-27 19:02:45\ntype: \"categories\"\n---\n","updated":"2023-01-27T11:38:30.584Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cleus4b740006ywvfhqln6lpt","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"留言板","date":"2021-02-18T05:53:33.000Z","type":"messageboard","_content":" \n# 留言板：\n## <div align=\"center\"> 有什么想说的？ </font>\n## <div align=\"center\"> 有什么想问的？ </font>\n## <div align=\"center\"> 有什么想吐槽的？ </font>\n## <div align=\"center\"> 可以在下面留言... </font>\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","source":"messageboard/index.md","raw":"\n---\ntitle: 留言板\ndate: 2021-02-18 13:53:33  \ntype: messageboard\n--- \n# 留言板：\n## <div align=\"center\"> 有什么想说的？ </font>\n## <div align=\"center\"> 有什么想问的？ </font>\n## <div align=\"center\"> 有什么想吐槽的？ </font>\n## <div align=\"center\"> 可以在下面留言... </font>\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","updated":"2023-01-27T13:33:11.516Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"cleus4b760008ywvffmcu3h7c","content":"<h1 id=\"留言板：\"><a href=\"#留言板：\" class=\"headerlink\" title=\"留言板：\"></a>留言板：</h1><h2 id=\"有什么想说的？\"><a href=\"#有什么想说的？\" class=\"headerlink\" title=\" 有什么想说的？ \"></a><div align=\"center\"> 有什么想说的？ </font></h2><h2 id=\"有什么想问的？\"><a href=\"#有什么想问的？\" class=\"headerlink\" title=\" 有什么想问的？ \"></a><div align=\"center\"> 有什么想问的？ </font></h2><h2 id=\"有什么想吐槽的？\"><a href=\"#有什么想吐槽的？\" class=\"headerlink\" title=\" 有什么想吐槽的？ \"></a><div align=\"center\"> 有什么想吐槽的？ </font></h2><h2 id=\"可以在下面留言…\"><a href=\"#可以在下面留言…\" class=\"headerlink\" title=\" 可以在下面留言… \"></a><div align=\"center\"> 可以在下面留言… </font></h2><script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"留言板：\"><a href=\"#留言板：\" class=\"headerlink\" title=\"留言板：\"></a>留言板：</h1><h2 id=\"有什么想说的？\"><a href=\"#有什么想说的？\" class=\"headerlink\" title=\" 有什么想说的？ \"></a><div align=\"center\"> 有什么想说的？ </font></h2><h2 id=\"有什么想问的？\"><a href=\"#有什么想问的？\" class=\"headerlink\" title=\" 有什么想问的？ \"></a><div align=\"center\"> 有什么想问的？ </font></h2><h2 id=\"有什么想吐槽的？\"><a href=\"#有什么想吐槽的？\" class=\"headerlink\" title=\" 有什么想吐槽的？ \"></a><div align=\"center\"> 有什么想吐槽的？ </font></h2><h2 id=\"可以在下面留言…\"><a href=\"#可以在下面留言…\" class=\"headerlink\" title=\" 可以在下面留言… \"></a><div align=\"center\"> 可以在下面留言… </font></h2><script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n"},{"title":"tags","date":"2023-01-27T11:02:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-01-27 19:02:29\ntype: \"tags\"\n---\n","updated":"2023-01-27T11:38:06.791Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cleus4b78000aywvf1mnqcz26","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"This is me","date":"2021-02-18T05:59:09.000Z","type":"myself","comments":0,"aside":false,"_content":"\n","source":"myself/index.md","raw":"---\ntitle: This is me\ndate: 2021-02-18 13:59:09\ntype: myself \ncomments: false\naside: false \n---\n\n","updated":"2023-01-27T07:49:58.607Z","path":"myself/index.html","layout":"page","_id":"cleus4b7d000fywvfhbr2drc5","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"Update","date":"2021-02-18T05:56:57.000Z","type":"timeline","comments":0,"_content":"","source":"timeline/index.md","raw":"---\ntitle: Update\ndate: 2021-02-18 13:56:57\ntype: timeline\ncomments: false \n---\n","updated":"2023-01-27T07:47:48.003Z","path":"timeline/index.html","layout":"page","_id":"cleus4b7f000hywvf4m174v61","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"2023美赛建模","date":"2023-02-16T02:16:31.000Z","_content":"\n### 参考\n\n本文参考阿里云天池大赛赛题解析\n\n<a href=\"https://github.com/changshanzhao/alibaba_tianchi_book\" target=\"_blank\" >源码链接点这里</a>\n\n### 源码\n\n#### model\n\n```python\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.max_open_warning': 0})\nimport seaborn as sns\n\n# modelling\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, RepeatedKFold, cross_val_score,cross_val_predict,KFold\nfrom sklearn.metrics import make_scorer,mean_squared_error\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor,AdaBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import PolynomialFeatures,MinMaxScaler,StandardScaler\nfrom sklearn.linear_model import Ridge\n\n\nx = pd.read_csv('x.csv')\ny = pd.read_csv('y.csv')\ndif = pd.read_csv('difficulty.csv')\n# normalise numeric columns\ncols_numeric=list(x.columns)\ncols_numeric.remove('Unnamed: 0')\ndef scale_minmax(col):\n    return (col-col.min())/(col.max()-col.min())\nscale_cols = [col for col in cols_numeric]\nx[scale_cols] = x[scale_cols].apply(scale_minmax,axis=0)\n# Box-Cox\ncols_transform=x.columns[1:]\nfor col in cols_transform:\n    # transform column\n    x.loc[:,col], _ = stats.boxcox(x.loc[:,col]+1)\n# split features\nx = x.iloc[:, 1:3]\nY = dif.iloc[:, 1]\nX = x[0:355]\ny = Y\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=100)\ny_train = np.array(y_train).reshape(-1, 1)\ny_valid = np.array(y_valid).reshape(-1, 1)\n\ndef get_test_data():\n    df_test = x.iloc[355]\n    df_test = np.array(df_test).reshape(1, -1)\n    #df_test = np.delete(df_test, [0], 1)\n\n    return df_test\n\nfrom sklearn.metrics import make_scorer\n\n# metric for evaluation\ndef rmse(y_true, y_pred):\n    diff = y_pred - y_true\n    sum_sq = sum(diff ** 2)\n    n = len(y_pred)\n    return np.sqrt(sum_sq / n)\n\ndef mse(y_ture, y_pred):\n    return mean_squared_error(y_ture, y_pred)\n\n# scorer to be used in sklearn model fitting\nrmse_scorer = make_scorer(rmse, greater_is_better=False)\nmse_scorer = make_scorer(mse, greater_is_better=False)\n\nfrom sklearn.preprocessing import StandardScaler\ndef get_trainning_data_omitoutliers():\n    X1=X_train.copy()\n    y1=y_train.copy()\n    return X1,y1\n\ndef train_model(model, param_grid=[], X=[], y=[], splits=5, repeats=5):\n    # get unmodified training data, unless data to use already specified\n    if len(y) == 0:\n        X, y = get_trainning_data_omitoutliers()\n        # poly_trans=PolynomialFeatures(degree=2)\n        # X=poly_trans.fit_transform(X)\n        # X=MinMaxScaler().fit_transform(X)\n\n    # create cross-validation method\n    rkfold = RepeatedKFold(n_splits=splits, n_repeats=repeats)\n\n    # perform a grid search if param_grid given\n    if len(param_grid) > 0:\n        # setup grid search parameters\n        gsearch = GridSearchCV(model, param_grid, cv=rkfold,\n                               scoring=\"neg_mean_squared_error\",\n                               verbose=1, return_train_score=True)\n\n        # search the grid\n        gsearch.fit(X, y)\n\n        # extract best model from the grid\n        model = gsearch.best_estimator_\n        best_idx = gsearch.best_index_\n\n        # get cv-scores for best model\n        grid_results = pd.DataFrame(gsearch.cv_results_)\n        cv_mean = abs(grid_results.loc[best_idx, 'mean_test_score'])\n        cv_std = grid_results.loc[best_idx, 'std_test_score']\n\n    # no grid search, just cross-val score for given model\n    else:\n        grid_results = []\n        cv_results = cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=rkfold)\n        cv_mean = abs(np.mean(cv_results))\n        cv_std = np.std(cv_results)\n\n    # combine mean and std cv-score in to a pandas series\n    cv_score = pd.Series({'mean': cv_mean, 'std': cv_std})\n\n    # predict y using the fitted model\n    y_pred = model.predict(X).ravel()\n\n    # print stats on model performance\n    print('----------------------')\n    print(model)\n    print('----------------------')\n    print('score=', model.score(X, y))\n    # print('rmse=', rmse(y, y_pred))\n    print('mse=', mse(y, y_pred))\n    print('cross_val: mean=', cv_mean, ', std=', cv_std)\n\n    return model, cv_score, grid_results\n\n# places to store optimal models and scores\nopt_models = dict()\nscore_models = pd.DataFrame(columns=['mean','std'])\n\n# no. k-fold splits\nsplits=5\n# no. k-fold iterations\nrepeats=5\n\nmodel = 'Ridge'\n\nopt_models[model] = Ridge()\nalph_range = np.arange(0.25,6,0.25)\nparam_grid = {'alpha': alph_range}\n\nopt_models[model],cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=repeats)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'Lasso'\n\nopt_models[model] = Lasso()\nalph_range = np.arange(1e-4,1e-3,4e-5)\nparam_grid = {'alpha': alph_range}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=repeats)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel='LinearSVR'\nopt_models[model] = LinearSVR()\n\ncrange = np.arange(0.1,1.0,0.1)\nparam_grid = {'C':crange,\n             'max_iter':[1000]}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=repeats)\n\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel ='ElasticNet'\nopt_models[model] = ElasticNet()\n\nparam_grid = {'alpha': np.arange(1e-4,1e-3,1e-4),\n              'l1_ratio': np.arange(0.1,1.0,0.1),\n              'max_iter':[100000]}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'KNeighbors'\nopt_models[model] = KNeighborsRegressor()\n\nparam_grid = {'n_neighbors':np.arange(3,11,1)}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'GradientBoosting'\nopt_models[model] = GradientBoostingRegressor()\n\nparam_grid = {'n_estimators':[150,250,350],\n              'max_depth':[1,2,3],\n              'min_samples_split':[5,6,7]}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'XGB'\nopt_models[model] = XGBRegressor()\n\nparam_grid = {'n_estimators':[100,200,300,400,500],\n              'max_depth':[1,2,3],\n             }\n\nopt_models[model], cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\ndef model_predict(test_data,test_y=[],stack=False):\n    #poly_trans=PolynomialFeatures(degree=2)\n    #test_data1=poly_trans.fit_transform(test_data)\n    #test_data=MinMaxScaler().fit_transform(test_data)\n    i=0\n    y_predict_total = np.zeros((test_data.shape[0],))\n    for model in opt_models.keys():\n\n        if model!='LinearSVR' and model!='KNeighbors':\n            y_predict=opt_models[model].predict(test_data)\n            y_predict=y_predict.ravel()\n            y_predict_total+=y_predict\n            i+=1\n        if len(test_y)>0:\n            print(\"{}_mse:\".format(model),mean_squared_error(y_predict,test_y))\n    y_predict_mean=np.round(y_predict_total/i,3)\n    if len(test_y)>0:\n        print(\"mean_mse:\",mean_squared_error(y_predict_mean,test_y))\n    else:\n        y_predict_mean=pd.Series(y_predict_mean)\n        return y_predict_mean\nmodel_predict(X_valid,y_valid)\ndf_test = x.iloc[355]\ndf_test = np.array(df_test).reshape(1, -1)\nmodel = opt_models['KNeighbors']\nres1 = model.predict(df_test)\nmodel = opt_models['XGB']\nres2 = model.predict(df_test)\nres = (res1+res2)/2\n# plot KNN\nx_1 = X_train.iloc[:,0] # 0or1\nx_2 = X_valid.iloc[:,0] # 0or1\ny_train = y_train.ravel()\ny_valid = y_train.ravel()\nplt.scatter(x_1,y_train,s = 10*10,c='orange',edgecolor='k')\nres1=res1.ravel()\nres1=res1[0]\ndf_test = x.iloc[355]\ndf_test = df_test.iloc[0] # 0or1\nplt.scatter(df_test,res1,s = 30*10,c='b',edgecolor='k')\nmodel = opt_models['KNeighbors']\nz = model.predict(X_valid)\nz = z.ravel()\nplt.scatter(x_2,z,s = 20*10,c='k',edgecolor='k')\nplt.title('KNN Regressor')\nplt.show(block=True)\n# plot XGB\nx_1 = X_train.iloc[:,0] # 0or1\nx_2 = X_valid.iloc[:,0] # 0or1\ny_train = y_train.ravel()\ny_valid = y_train.ravel()\nplt.scatter(x_1,y_train,s = 10*10,c='orange',edgecolor='k')\nres2=res2.ravel()\nres2=res2[0]\ndf_test = x.iloc[355]\ndf_test = df_test.iloc[0] # 0or1\nplt.scatter(df_test,res2,s = 30*10,c='b',edgecolor='k')\nmodel = opt_models['XGB']\nz = model.predict(X_valid)\nz = z.ravel()\nplt.scatter(x_2,z,s = 20*10,c='k',edgecolor='k')\nplt.title('XGB')\nplt.show(block=True)\n```\n\n#### 数据预处理\n\n```python\nimport operator\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = pd.read_csv('data.csv')\ndifficulty = pd.read_csv('difficulty.csv')\ny = pd.read_csv('y.csv')\nword = data.iloc[:,3]\n\ndef count_each_char_sort_value(str):\n    dict = {}\n    for i in str:\n        dict[i] = dict.get(i, 0) + 1\n    dict = sorted(dict.items(), key=operator.itemgetter(1), reverse=True)\n    return dict\n\nx = []\nfor i in range(0,355):\n    x.append(count_each_char_sort_value(word[i]))\nx_pd = pd.DataFrame(x)\n\nfirst_char = []\nfor i in range(0,355):\n    first_char.append(ord(word[i][0])-97)\n\nrepeat_char = []\nfor i in range(0,355):\n    if(x_pd.iloc[i,4]==None):\n        if(x_pd.iloc[i,3]==None):\n            repeat_char.append(2)\n        else:\n            repeat_char.append(1)\n    else:\n        repeat_char.append(0)\ndf1 = pd.DataFrame(repeat_char, columns=['repeat'])\ndf1.insert(1, 'first_char', first_char,allow_duplicates = False)\ndf1.to_csv('x.csv')\n```\n\n### 分析\n\n对数据进行多个模型的拟合，取拟合效果最佳的模型为所选模型\n\nstack融合的投票机制我没搞，直接算的预测值平均值\n\n还有一个缺点是自变量选的不好，我知道自变量的正态分布和泛化程度都不符合要求（和因变量相关性也不高），所以我也没检验，不自取其辱了，哈哈哈\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MCM2023_zhaojb\"\n        data-repo-id=\"R_kgDOI_tjsA\"\n        data-category=\"General\"\n        data-category-id=\"DIC_kwDOI_tjsM4CUTms\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","source":"_posts/2023美赛建模.md","raw":"---\ntitle: 2023美赛建模\ndate: 2023-02-16 10:16:31\ntags:\n\t- 竞赛\ncategories:\n\t- 教程\n---\n\n### 参考\n\n本文参考阿里云天池大赛赛题解析\n\n<a href=\"https://github.com/changshanzhao/alibaba_tianchi_book\" target=\"_blank\" >源码链接点这里</a>\n\n### 源码\n\n#### model\n\n```python\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.max_open_warning': 0})\nimport seaborn as sns\n\n# modelling\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, RepeatedKFold, cross_val_score,cross_val_predict,KFold\nfrom sklearn.metrics import make_scorer,mean_squared_error\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor,AdaBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import PolynomialFeatures,MinMaxScaler,StandardScaler\nfrom sklearn.linear_model import Ridge\n\n\nx = pd.read_csv('x.csv')\ny = pd.read_csv('y.csv')\ndif = pd.read_csv('difficulty.csv')\n# normalise numeric columns\ncols_numeric=list(x.columns)\ncols_numeric.remove('Unnamed: 0')\ndef scale_minmax(col):\n    return (col-col.min())/(col.max()-col.min())\nscale_cols = [col for col in cols_numeric]\nx[scale_cols] = x[scale_cols].apply(scale_minmax,axis=0)\n# Box-Cox\ncols_transform=x.columns[1:]\nfor col in cols_transform:\n    # transform column\n    x.loc[:,col], _ = stats.boxcox(x.loc[:,col]+1)\n# split features\nx = x.iloc[:, 1:3]\nY = dif.iloc[:, 1]\nX = x[0:355]\ny = Y\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=100)\ny_train = np.array(y_train).reshape(-1, 1)\ny_valid = np.array(y_valid).reshape(-1, 1)\n\ndef get_test_data():\n    df_test = x.iloc[355]\n    df_test = np.array(df_test).reshape(1, -1)\n    #df_test = np.delete(df_test, [0], 1)\n\n    return df_test\n\nfrom sklearn.metrics import make_scorer\n\n# metric for evaluation\ndef rmse(y_true, y_pred):\n    diff = y_pred - y_true\n    sum_sq = sum(diff ** 2)\n    n = len(y_pred)\n    return np.sqrt(sum_sq / n)\n\ndef mse(y_ture, y_pred):\n    return mean_squared_error(y_ture, y_pred)\n\n# scorer to be used in sklearn model fitting\nrmse_scorer = make_scorer(rmse, greater_is_better=False)\nmse_scorer = make_scorer(mse, greater_is_better=False)\n\nfrom sklearn.preprocessing import StandardScaler\ndef get_trainning_data_omitoutliers():\n    X1=X_train.copy()\n    y1=y_train.copy()\n    return X1,y1\n\ndef train_model(model, param_grid=[], X=[], y=[], splits=5, repeats=5):\n    # get unmodified training data, unless data to use already specified\n    if len(y) == 0:\n        X, y = get_trainning_data_omitoutliers()\n        # poly_trans=PolynomialFeatures(degree=2)\n        # X=poly_trans.fit_transform(X)\n        # X=MinMaxScaler().fit_transform(X)\n\n    # create cross-validation method\n    rkfold = RepeatedKFold(n_splits=splits, n_repeats=repeats)\n\n    # perform a grid search if param_grid given\n    if len(param_grid) > 0:\n        # setup grid search parameters\n        gsearch = GridSearchCV(model, param_grid, cv=rkfold,\n                               scoring=\"neg_mean_squared_error\",\n                               verbose=1, return_train_score=True)\n\n        # search the grid\n        gsearch.fit(X, y)\n\n        # extract best model from the grid\n        model = gsearch.best_estimator_\n        best_idx = gsearch.best_index_\n\n        # get cv-scores for best model\n        grid_results = pd.DataFrame(gsearch.cv_results_)\n        cv_mean = abs(grid_results.loc[best_idx, 'mean_test_score'])\n        cv_std = grid_results.loc[best_idx, 'std_test_score']\n\n    # no grid search, just cross-val score for given model\n    else:\n        grid_results = []\n        cv_results = cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=rkfold)\n        cv_mean = abs(np.mean(cv_results))\n        cv_std = np.std(cv_results)\n\n    # combine mean and std cv-score in to a pandas series\n    cv_score = pd.Series({'mean': cv_mean, 'std': cv_std})\n\n    # predict y using the fitted model\n    y_pred = model.predict(X).ravel()\n\n    # print stats on model performance\n    print('----------------------')\n    print(model)\n    print('----------------------')\n    print('score=', model.score(X, y))\n    # print('rmse=', rmse(y, y_pred))\n    print('mse=', mse(y, y_pred))\n    print('cross_val: mean=', cv_mean, ', std=', cv_std)\n\n    return model, cv_score, grid_results\n\n# places to store optimal models and scores\nopt_models = dict()\nscore_models = pd.DataFrame(columns=['mean','std'])\n\n# no. k-fold splits\nsplits=5\n# no. k-fold iterations\nrepeats=5\n\nmodel = 'Ridge'\n\nopt_models[model] = Ridge()\nalph_range = np.arange(0.25,6,0.25)\nparam_grid = {'alpha': alph_range}\n\nopt_models[model],cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=repeats)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'Lasso'\n\nopt_models[model] = Lasso()\nalph_range = np.arange(1e-4,1e-3,4e-5)\nparam_grid = {'alpha': alph_range}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=repeats)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel='LinearSVR'\nopt_models[model] = LinearSVR()\n\ncrange = np.arange(0.1,1.0,0.1)\nparam_grid = {'C':crange,\n             'max_iter':[1000]}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=repeats)\n\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel ='ElasticNet'\nopt_models[model] = ElasticNet()\n\nparam_grid = {'alpha': np.arange(1e-4,1e-3,1e-4),\n              'l1_ratio': np.arange(0.1,1.0,0.1),\n              'max_iter':[100000]}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'KNeighbors'\nopt_models[model] = KNeighborsRegressor()\n\nparam_grid = {'n_neighbors':np.arange(3,11,1)}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'GradientBoosting'\nopt_models[model] = GradientBoostingRegressor()\n\nparam_grid = {'n_estimators':[150,250,350],\n              'max_depth':[1,2,3],\n              'min_samples_split':[5,6,7]}\n\nopt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\nmodel = 'XGB'\nopt_models[model] = XGBRegressor()\n\nparam_grid = {'n_estimators':[100,200,300,400,500],\n              'max_depth':[1,2,3],\n             }\n\nopt_models[model], cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,\n                                              splits=splits, repeats=1)\n\ncv_score.name = model\nscore_models = score_models.append(cv_score)\n\ndef model_predict(test_data,test_y=[],stack=False):\n    #poly_trans=PolynomialFeatures(degree=2)\n    #test_data1=poly_trans.fit_transform(test_data)\n    #test_data=MinMaxScaler().fit_transform(test_data)\n    i=0\n    y_predict_total = np.zeros((test_data.shape[0],))\n    for model in opt_models.keys():\n\n        if model!='LinearSVR' and model!='KNeighbors':\n            y_predict=opt_models[model].predict(test_data)\n            y_predict=y_predict.ravel()\n            y_predict_total+=y_predict\n            i+=1\n        if len(test_y)>0:\n            print(\"{}_mse:\".format(model),mean_squared_error(y_predict,test_y))\n    y_predict_mean=np.round(y_predict_total/i,3)\n    if len(test_y)>0:\n        print(\"mean_mse:\",mean_squared_error(y_predict_mean,test_y))\n    else:\n        y_predict_mean=pd.Series(y_predict_mean)\n        return y_predict_mean\nmodel_predict(X_valid,y_valid)\ndf_test = x.iloc[355]\ndf_test = np.array(df_test).reshape(1, -1)\nmodel = opt_models['KNeighbors']\nres1 = model.predict(df_test)\nmodel = opt_models['XGB']\nres2 = model.predict(df_test)\nres = (res1+res2)/2\n# plot KNN\nx_1 = X_train.iloc[:,0] # 0or1\nx_2 = X_valid.iloc[:,0] # 0or1\ny_train = y_train.ravel()\ny_valid = y_train.ravel()\nplt.scatter(x_1,y_train,s = 10*10,c='orange',edgecolor='k')\nres1=res1.ravel()\nres1=res1[0]\ndf_test = x.iloc[355]\ndf_test = df_test.iloc[0] # 0or1\nplt.scatter(df_test,res1,s = 30*10,c='b',edgecolor='k')\nmodel = opt_models['KNeighbors']\nz = model.predict(X_valid)\nz = z.ravel()\nplt.scatter(x_2,z,s = 20*10,c='k',edgecolor='k')\nplt.title('KNN Regressor')\nplt.show(block=True)\n# plot XGB\nx_1 = X_train.iloc[:,0] # 0or1\nx_2 = X_valid.iloc[:,0] # 0or1\ny_train = y_train.ravel()\ny_valid = y_train.ravel()\nplt.scatter(x_1,y_train,s = 10*10,c='orange',edgecolor='k')\nres2=res2.ravel()\nres2=res2[0]\ndf_test = x.iloc[355]\ndf_test = df_test.iloc[0] # 0or1\nplt.scatter(df_test,res2,s = 30*10,c='b',edgecolor='k')\nmodel = opt_models['XGB']\nz = model.predict(X_valid)\nz = z.ravel()\nplt.scatter(x_2,z,s = 20*10,c='k',edgecolor='k')\nplt.title('XGB')\nplt.show(block=True)\n```\n\n#### 数据预处理\n\n```python\nimport operator\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = pd.read_csv('data.csv')\ndifficulty = pd.read_csv('difficulty.csv')\ny = pd.read_csv('y.csv')\nword = data.iloc[:,3]\n\ndef count_each_char_sort_value(str):\n    dict = {}\n    for i in str:\n        dict[i] = dict.get(i, 0) + 1\n    dict = sorted(dict.items(), key=operator.itemgetter(1), reverse=True)\n    return dict\n\nx = []\nfor i in range(0,355):\n    x.append(count_each_char_sort_value(word[i]))\nx_pd = pd.DataFrame(x)\n\nfirst_char = []\nfor i in range(0,355):\n    first_char.append(ord(word[i][0])-97)\n\nrepeat_char = []\nfor i in range(0,355):\n    if(x_pd.iloc[i,4]==None):\n        if(x_pd.iloc[i,3]==None):\n            repeat_char.append(2)\n        else:\n            repeat_char.append(1)\n    else:\n        repeat_char.append(0)\ndf1 = pd.DataFrame(repeat_char, columns=['repeat'])\ndf1.insert(1, 'first_char', first_char,allow_duplicates = False)\ndf1.to_csv('x.csv')\n```\n\n### 分析\n\n对数据进行多个模型的拟合，取拟合效果最佳的模型为所选模型\n\nstack融合的投票机制我没搞，直接算的预测值平均值\n\n还有一个缺点是自变量选的不好，我知道自变量的正态分布和泛化程度都不符合要求（和因变量相关性也不高），所以我也没检验，不自取其辱了，哈哈哈\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MCM2023_zhaojb\"\n        data-repo-id=\"R_kgDOI_tjsA\"\n        data-category=\"General\"\n        data-category-id=\"DIC_kwDOI_tjsM4CUTms\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","slug":"2023美赛建模","published":1,"updated":"2023-02-19T08:56:11.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b6p0001ywvf96r4b720","content":"<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>本文参考阿里云天池大赛赛题解析</p>\n<p><a href=\"https://github.com/changshanzhao/alibaba_tianchi_book\" target=\"_blank\" >源码链接点这里</a></p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><h4 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">plt.rcParams.update(&#123;<span class=\"string\">&#x27;figure.max_open_warning&#x27;</span>: <span class=\"number\">0</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># modelling</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span> stats</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> GridSearchCV, RepeatedKFold, cross_val_score,cross_val_predict,KFold</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> make_scorer,mean_squared_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LinearRegression, Lasso, Ridge, ElasticNet</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.svm <span class=\"keyword\">import</span> LinearSVR, SVR</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestRegressor, GradientBoostingRegressor,AdaBoostRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> xgboost <span class=\"keyword\">import</span> XGBRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> PolynomialFeatures,MinMaxScaler,StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> Ridge</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x = pd.read_csv(<span class=\"string\">&#x27;x.csv&#x27;</span>)</span><br><span class=\"line\">y = pd.read_csv(<span class=\"string\">&#x27;y.csv&#x27;</span>)</span><br><span class=\"line\">dif = pd.read_csv(<span class=\"string\">&#x27;difficulty.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># normalise numeric columns</span></span><br><span class=\"line\">cols_numeric=<span class=\"built_in\">list</span>(x.columns)</span><br><span class=\"line\">cols_numeric.remove(<span class=\"string\">&#x27;Unnamed: 0&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">scale_minmax</span>(<span class=\"params\">col</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (col-col.<span class=\"built_in\">min</span>())/(col.<span class=\"built_in\">max</span>()-col.<span class=\"built_in\">min</span>())</span><br><span class=\"line\">scale_cols = [col <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> cols_numeric]</span><br><span class=\"line\">x[scale_cols] = x[scale_cols].apply(scale_minmax,axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># Box-Cox</span></span><br><span class=\"line\">cols_transform=x.columns[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> cols_transform:</span><br><span class=\"line\">    <span class=\"comment\"># transform column</span></span><br><span class=\"line\">    x.loc[:,col], _ = stats.boxcox(x.loc[:,col]+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># split features</span></span><br><span class=\"line\">x = x.iloc[:, <span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">Y = dif.iloc[:, <span class=\"number\">1</span>]</span><br><span class=\"line\">X = x[<span class=\"number\">0</span>:<span class=\"number\">355</span>]</span><br><span class=\"line\">y = Y</span><br><span class=\"line\">X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">100</span>)</span><br><span class=\"line\">y_train = np.array(y_train).reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">y_valid = np.array(y_valid).reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_test_data</span>():</span><br><span class=\"line\">    df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">    df_test = np.array(df_test).reshape(<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">#df_test = np.delete(df_test, [0], 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> df_test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> make_scorer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># metric for evaluation</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rmse</span>(<span class=\"params\">y_true, y_pred</span>):</span><br><span class=\"line\">    diff = y_pred - y_true</span><br><span class=\"line\">    sum_sq = <span class=\"built_in\">sum</span>(diff ** <span class=\"number\">2</span>)</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(y_pred)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.sqrt(sum_sq / n)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mse</span>(<span class=\"params\">y_ture, y_pred</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mean_squared_error(y_ture, y_pred)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># scorer to be used in sklearn model fitting</span></span><br><span class=\"line\">rmse_scorer = make_scorer(rmse, greater_is_better=<span class=\"literal\">False</span>)</span><br><span class=\"line\">mse_scorer = make_scorer(mse, greater_is_better=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_trainning_data_omitoutliers</span>():</span><br><span class=\"line\">    X1=X_train.copy()</span><br><span class=\"line\">    y1=y_train.copy()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> X1,y1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train_model</span>(<span class=\"params\">model, param_grid=[], X=[], y=[], splits=<span class=\"number\">5</span>, repeats=<span class=\"number\">5</span></span>):</span><br><span class=\"line\">    <span class=\"comment\"># get unmodified training data, unless data to use already specified</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(y) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        X, y = get_trainning_data_omitoutliers()</span><br><span class=\"line\">        <span class=\"comment\"># poly_trans=PolynomialFeatures(degree=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># X=poly_trans.fit_transform(X)</span></span><br><span class=\"line\">        <span class=\"comment\"># X=MinMaxScaler().fit_transform(X)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># create cross-validation method</span></span><br><span class=\"line\">    rkfold = RepeatedKFold(n_splits=splits, n_repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># perform a grid search if param_grid given</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(param_grid) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># setup grid search parameters</span></span><br><span class=\"line\">        gsearch = GridSearchCV(model, param_grid, cv=rkfold,</span><br><span class=\"line\">                               scoring=<span class=\"string\">&quot;neg_mean_squared_error&quot;</span>,</span><br><span class=\"line\">                               verbose=<span class=\"number\">1</span>, return_train_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># search the grid</span></span><br><span class=\"line\">        gsearch.fit(X, y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># extract best model from the grid</span></span><br><span class=\"line\">        model = gsearch.best_estimator_</span><br><span class=\"line\">        best_idx = gsearch.best_index_</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get cv-scores for best model</span></span><br><span class=\"line\">        grid_results = pd.DataFrame(gsearch.cv_results_)</span><br><span class=\"line\">        cv_mean = <span class=\"built_in\">abs</span>(grid_results.loc[best_idx, <span class=\"string\">&#x27;mean_test_score&#x27;</span>])</span><br><span class=\"line\">        cv_std = grid_results.loc[best_idx, <span class=\"string\">&#x27;std_test_score&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># no grid search, just cross-val score for given model</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        grid_results = []</span><br><span class=\"line\">        cv_results = cross_val_score(model, X, y, scoring=<span class=\"string\">&quot;neg_mean_squared_error&quot;</span>, cv=rkfold)</span><br><span class=\"line\">        cv_mean = <span class=\"built_in\">abs</span>(np.mean(cv_results))</span><br><span class=\"line\">        cv_std = np.std(cv_results)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># combine mean and std cv-score in to a pandas series</span></span><br><span class=\"line\">    cv_score = pd.Series(&#123;<span class=\"string\">&#x27;mean&#x27;</span>: cv_mean, <span class=\"string\">&#x27;std&#x27;</span>: cv_std&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># predict y using the fitted model</span></span><br><span class=\"line\">    y_pred = model.predict(X).ravel()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print stats on model performance</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;----------------------&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;----------------------&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;score=&#x27;</span>, model.score(X, y))</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;rmse=&#x27;, rmse(y, y_pred))</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;mse=&#x27;</span>, mse(y, y_pred))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;cross_val: mean=&#x27;</span>, cv_mean, <span class=\"string\">&#x27;, std=&#x27;</span>, cv_std)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> model, cv_score, grid_results</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># places to store optimal models and scores</span></span><br><span class=\"line\">opt_models = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">score_models = pd.DataFrame(columns=[<span class=\"string\">&#x27;mean&#x27;</span>,<span class=\"string\">&#x27;std&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no. k-fold splits</span></span><br><span class=\"line\">splits=<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\"># no. k-fold iterations</span></span><br><span class=\"line\">repeats=<span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;Ridge&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model] = Ridge()</span><br><span class=\"line\">alph_range = np.arange(<span class=\"number\">0.25</span>,<span class=\"number\">6</span>,<span class=\"number\">0.25</span>)</span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;alpha&#x27;</span>: alph_range&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model],cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;Lasso&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model] = Lasso()</span><br><span class=\"line\">alph_range = np.arange(<span class=\"number\">1e-4</span>,<span class=\"number\">1e-3</span>,<span class=\"number\">4e-5</span>)</span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;alpha&#x27;</span>: alph_range&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model=<span class=\"string\">&#x27;LinearSVR&#x27;</span></span><br><span class=\"line\">opt_models[model] = LinearSVR()</span><br><span class=\"line\"></span><br><span class=\"line\">crange = np.arange(<span class=\"number\">0.1</span>,<span class=\"number\">1.0</span>,<span class=\"number\">0.1</span>)</span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;C&#x27;</span>:crange,</span><br><span class=\"line\">             <span class=\"string\">&#x27;max_iter&#x27;</span>:[<span class=\"number\">1000</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model =<span class=\"string\">&#x27;ElasticNet&#x27;</span></span><br><span class=\"line\">opt_models[model] = ElasticNet()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;alpha&#x27;</span>: np.arange(<span class=\"number\">1e-4</span>,<span class=\"number\">1e-3</span>,<span class=\"number\">1e-4</span>),</span><br><span class=\"line\">              <span class=\"string\">&#x27;l1_ratio&#x27;</span>: np.arange(<span class=\"number\">0.1</span>,<span class=\"number\">1.0</span>,<span class=\"number\">0.1</span>),</span><br><span class=\"line\">              <span class=\"string\">&#x27;max_iter&#x27;</span>:[<span class=\"number\">100000</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;KNeighbors&#x27;</span></span><br><span class=\"line\">opt_models[model] = KNeighborsRegressor()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;n_neighbors&#x27;</span>:np.arange(<span class=\"number\">3</span>,<span class=\"number\">11</span>,<span class=\"number\">1</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;GradientBoosting&#x27;</span></span><br><span class=\"line\">opt_models[model] = GradientBoostingRegressor()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;n_estimators&#x27;</span>:[<span class=\"number\">150</span>,<span class=\"number\">250</span>,<span class=\"number\">350</span>],</span><br><span class=\"line\">              <span class=\"string\">&#x27;max_depth&#x27;</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">              <span class=\"string\">&#x27;min_samples_split&#x27;</span>:[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;XGB&#x27;</span></span><br><span class=\"line\">opt_models[model] = XGBRegressor()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;n_estimators&#x27;</span>:[<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">500</span>],</span><br><span class=\"line\">              <span class=\"string\">&#x27;max_depth&#x27;</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">model_predict</span>(<span class=\"params\">test_data,test_y=[],stack=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    <span class=\"comment\">#poly_trans=PolynomialFeatures(degree=2)</span></span><br><span class=\"line\">    <span class=\"comment\">#test_data1=poly_trans.fit_transform(test_data)</span></span><br><span class=\"line\">    <span class=\"comment\">#test_data=MinMaxScaler().fit_transform(test_data)</span></span><br><span class=\"line\">    i=<span class=\"number\">0</span></span><br><span class=\"line\">    y_predict_total = np.zeros((test_data.shape[<span class=\"number\">0</span>],))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> model <span class=\"keyword\">in</span> opt_models.keys():</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> model!=<span class=\"string\">&#x27;LinearSVR&#x27;</span> <span class=\"keyword\">and</span> model!=<span class=\"string\">&#x27;KNeighbors&#x27;</span>:</span><br><span class=\"line\">            y_predict=opt_models[model].predict(test_data)</span><br><span class=\"line\">            y_predict=y_predict.ravel()</span><br><span class=\"line\">            y_predict_total+=y_predict</span><br><span class=\"line\">            i+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(test_y)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125;_mse:&quot;</span>.<span class=\"built_in\">format</span>(model),mean_squared_error(y_predict,test_y))</span><br><span class=\"line\">    y_predict_mean=np.<span class=\"built_in\">round</span>(y_predict_total/i,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(test_y)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;mean_mse:&quot;</span>,mean_squared_error(y_predict_mean,test_y))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        y_predict_mean=pd.Series(y_predict_mean)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y_predict_mean</span><br><span class=\"line\">model_predict(X_valid,y_valid)</span><br><span class=\"line\">df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">df_test = np.array(df_test).reshape(<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;KNeighbors&#x27;</span>]</span><br><span class=\"line\">res1 = model.predict(df_test)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;XGB&#x27;</span>]</span><br><span class=\"line\">res2 = model.predict(df_test)</span><br><span class=\"line\">res = (res1+res2)/<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># plot KNN</span></span><br><span class=\"line\">x_1 = X_train.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">x_2 = X_valid.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">y_train = y_train.ravel()</span><br><span class=\"line\">y_valid = y_train.ravel()</span><br><span class=\"line\">plt.scatter(x_1,y_train,s = <span class=\"number\">10</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;orange&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">res1=res1.ravel()</span><br><span class=\"line\">res1=res1[<span class=\"number\">0</span>]</span><br><span class=\"line\">df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">df_test = df_test.iloc[<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">plt.scatter(df_test,res1,s = <span class=\"number\">30</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;b&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;KNeighbors&#x27;</span>]</span><br><span class=\"line\">z = model.predict(X_valid)</span><br><span class=\"line\">z = z.ravel()</span><br><span class=\"line\">plt.scatter(x_2,z,s = <span class=\"number\">20</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;k&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;KNN Regressor&#x27;</span>)</span><br><span class=\"line\">plt.show(block=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># plot XGB</span></span><br><span class=\"line\">x_1 = X_train.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">x_2 = X_valid.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">y_train = y_train.ravel()</span><br><span class=\"line\">y_valid = y_train.ravel()</span><br><span class=\"line\">plt.scatter(x_1,y_train,s = <span class=\"number\">10</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;orange&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">res2=res2.ravel()</span><br><span class=\"line\">res2=res2[<span class=\"number\">0</span>]</span><br><span class=\"line\">df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">df_test = df_test.iloc[<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">plt.scatter(df_test,res2,s = <span class=\"number\">30</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;b&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;XGB&#x27;</span>]</span><br><span class=\"line\">z = model.predict(X_valid)</span><br><span class=\"line\">z = z.ravel()</span><br><span class=\"line\">plt.scatter(x_2,z,s = <span class=\"number\">20</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;k&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;XGB&#x27;</span>)</span><br><span class=\"line\">plt.show(block=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> operator</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> MinMaxScaler</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">data = pd.read_csv(<span class=\"string\">&#x27;data.csv&#x27;</span>)</span><br><span class=\"line\">difficulty = pd.read_csv(<span class=\"string\">&#x27;difficulty.csv&#x27;</span>)</span><br><span class=\"line\">y = pd.read_csv(<span class=\"string\">&#x27;y.csv&#x27;</span>)</span><br><span class=\"line\">word = data.iloc[:,<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_each_char_sort_value</span>(<span class=\"params\"><span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"built_in\">dict</span>[i] = <span class=\"built_in\">dict</span>.get(i, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = <span class=\"built_in\">sorted</span>(<span class=\"built_in\">dict</span>.items(), key=operator.itemgetter(<span class=\"number\">1</span>), reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dict</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">355</span>):</span><br><span class=\"line\">    x.append(count_each_char_sort_value(word[i]))</span><br><span class=\"line\">x_pd = pd.DataFrame(x)</span><br><span class=\"line\"></span><br><span class=\"line\">first_char = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">355</span>):</span><br><span class=\"line\">    first_char.append(<span class=\"built_in\">ord</span>(word[i][<span class=\"number\">0</span>])-<span class=\"number\">97</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">repeat_char = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">355</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x_pd.iloc[i,<span class=\"number\">4</span>]==<span class=\"literal\">None</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x_pd.iloc[i,<span class=\"number\">3</span>]==<span class=\"literal\">None</span>):</span><br><span class=\"line\">            repeat_char.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            repeat_char.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        repeat_char.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">df1 = pd.DataFrame(repeat_char, columns=[<span class=\"string\">&#x27;repeat&#x27;</span>])</span><br><span class=\"line\">df1.insert(<span class=\"number\">1</span>, <span class=\"string\">&#x27;first_char&#x27;</span>, first_char,allow_duplicates = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df1.to_csv(<span class=\"string\">&#x27;x.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>对数据进行多个模型的拟合，取拟合效果最佳的模型为所选模型</p>\n<p>stack融合的投票机制我没搞，直接算的预测值平均值</p>\n<p>还有一个缺点是自变量选的不好，我知道自变量的正态分布和泛化程度都不符合要求（和因变量相关性也不高），所以我也没检验，不自取其辱了，哈哈哈</p>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MCM2023_zhaojb\"\n        data-repo-id=\"R_kgDOI_tjsA\"\n        data-category=\"General\"\n        data-category-id=\"DIC_kwDOI_tjsM4CUTms\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>本文参考阿里云天池大赛赛题解析</p>\n<p><a href=\"https://github.com/changshanzhao/alibaba_tianchi_book\" target=\"_blank\" >源码链接点这里</a></p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><h4 id=\"model\"><a href=\"#model\" class=\"headerlink\" title=\"model\"></a>model</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">plt.rcParams.update(&#123;<span class=\"string\">&#x27;figure.max_open_warning&#x27;</span>: <span class=\"number\">0</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># modelling</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span> stats</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> GridSearchCV, RepeatedKFold, cross_val_score,cross_val_predict,KFold</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> make_scorer,mean_squared_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LinearRegression, Lasso, Ridge, ElasticNet</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.svm <span class=\"keyword\">import</span> LinearSVR, SVR</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestRegressor, GradientBoostingRegressor,AdaBoostRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> xgboost <span class=\"keyword\">import</span> XGBRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> PolynomialFeatures,MinMaxScaler,StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> Ridge</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x = pd.read_csv(<span class=\"string\">&#x27;x.csv&#x27;</span>)</span><br><span class=\"line\">y = pd.read_csv(<span class=\"string\">&#x27;y.csv&#x27;</span>)</span><br><span class=\"line\">dif = pd.read_csv(<span class=\"string\">&#x27;difficulty.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># normalise numeric columns</span></span><br><span class=\"line\">cols_numeric=<span class=\"built_in\">list</span>(x.columns)</span><br><span class=\"line\">cols_numeric.remove(<span class=\"string\">&#x27;Unnamed: 0&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">scale_minmax</span>(<span class=\"params\">col</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (col-col.<span class=\"built_in\">min</span>())/(col.<span class=\"built_in\">max</span>()-col.<span class=\"built_in\">min</span>())</span><br><span class=\"line\">scale_cols = [col <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> cols_numeric]</span><br><span class=\"line\">x[scale_cols] = x[scale_cols].apply(scale_minmax,axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># Box-Cox</span></span><br><span class=\"line\">cols_transform=x.columns[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> cols_transform:</span><br><span class=\"line\">    <span class=\"comment\"># transform column</span></span><br><span class=\"line\">    x.loc[:,col], _ = stats.boxcox(x.loc[:,col]+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># split features</span></span><br><span class=\"line\">x = x.iloc[:, <span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">Y = dif.iloc[:, <span class=\"number\">1</span>]</span><br><span class=\"line\">X = x[<span class=\"number\">0</span>:<span class=\"number\">355</span>]</span><br><span class=\"line\">y = Y</span><br><span class=\"line\">X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">100</span>)</span><br><span class=\"line\">y_train = np.array(y_train).reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">y_valid = np.array(y_valid).reshape(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_test_data</span>():</span><br><span class=\"line\">    df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">    df_test = np.array(df_test).reshape(<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">#df_test = np.delete(df_test, [0], 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> df_test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> make_scorer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># metric for evaluation</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rmse</span>(<span class=\"params\">y_true, y_pred</span>):</span><br><span class=\"line\">    diff = y_pred - y_true</span><br><span class=\"line\">    sum_sq = <span class=\"built_in\">sum</span>(diff ** <span class=\"number\">2</span>)</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(y_pred)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.sqrt(sum_sq / n)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mse</span>(<span class=\"params\">y_ture, y_pred</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mean_squared_error(y_ture, y_pred)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># scorer to be used in sklearn model fitting</span></span><br><span class=\"line\">rmse_scorer = make_scorer(rmse, greater_is_better=<span class=\"literal\">False</span>)</span><br><span class=\"line\">mse_scorer = make_scorer(mse, greater_is_better=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_trainning_data_omitoutliers</span>():</span><br><span class=\"line\">    X1=X_train.copy()</span><br><span class=\"line\">    y1=y_train.copy()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> X1,y1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train_model</span>(<span class=\"params\">model, param_grid=[], X=[], y=[], splits=<span class=\"number\">5</span>, repeats=<span class=\"number\">5</span></span>):</span><br><span class=\"line\">    <span class=\"comment\"># get unmodified training data, unless data to use already specified</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(y) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        X, y = get_trainning_data_omitoutliers()</span><br><span class=\"line\">        <span class=\"comment\"># poly_trans=PolynomialFeatures(degree=2)</span></span><br><span class=\"line\">        <span class=\"comment\"># X=poly_trans.fit_transform(X)</span></span><br><span class=\"line\">        <span class=\"comment\"># X=MinMaxScaler().fit_transform(X)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># create cross-validation method</span></span><br><span class=\"line\">    rkfold = RepeatedKFold(n_splits=splits, n_repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># perform a grid search if param_grid given</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(param_grid) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># setup grid search parameters</span></span><br><span class=\"line\">        gsearch = GridSearchCV(model, param_grid, cv=rkfold,</span><br><span class=\"line\">                               scoring=<span class=\"string\">&quot;neg_mean_squared_error&quot;</span>,</span><br><span class=\"line\">                               verbose=<span class=\"number\">1</span>, return_train_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># search the grid</span></span><br><span class=\"line\">        gsearch.fit(X, y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># extract best model from the grid</span></span><br><span class=\"line\">        model = gsearch.best_estimator_</span><br><span class=\"line\">        best_idx = gsearch.best_index_</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get cv-scores for best model</span></span><br><span class=\"line\">        grid_results = pd.DataFrame(gsearch.cv_results_)</span><br><span class=\"line\">        cv_mean = <span class=\"built_in\">abs</span>(grid_results.loc[best_idx, <span class=\"string\">&#x27;mean_test_score&#x27;</span>])</span><br><span class=\"line\">        cv_std = grid_results.loc[best_idx, <span class=\"string\">&#x27;std_test_score&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># no grid search, just cross-val score for given model</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        grid_results = []</span><br><span class=\"line\">        cv_results = cross_val_score(model, X, y, scoring=<span class=\"string\">&quot;neg_mean_squared_error&quot;</span>, cv=rkfold)</span><br><span class=\"line\">        cv_mean = <span class=\"built_in\">abs</span>(np.mean(cv_results))</span><br><span class=\"line\">        cv_std = np.std(cv_results)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># combine mean and std cv-score in to a pandas series</span></span><br><span class=\"line\">    cv_score = pd.Series(&#123;<span class=\"string\">&#x27;mean&#x27;</span>: cv_mean, <span class=\"string\">&#x27;std&#x27;</span>: cv_std&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># predict y using the fitted model</span></span><br><span class=\"line\">    y_pred = model.predict(X).ravel()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print stats on model performance</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;----------------------&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;----------------------&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;score=&#x27;</span>, model.score(X, y))</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;rmse=&#x27;, rmse(y, y_pred))</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;mse=&#x27;</span>, mse(y, y_pred))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;cross_val: mean=&#x27;</span>, cv_mean, <span class=\"string\">&#x27;, std=&#x27;</span>, cv_std)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> model, cv_score, grid_results</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># places to store optimal models and scores</span></span><br><span class=\"line\">opt_models = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">score_models = pd.DataFrame(columns=[<span class=\"string\">&#x27;mean&#x27;</span>,<span class=\"string\">&#x27;std&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no. k-fold splits</span></span><br><span class=\"line\">splits=<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"comment\"># no. k-fold iterations</span></span><br><span class=\"line\">repeats=<span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;Ridge&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model] = Ridge()</span><br><span class=\"line\">alph_range = np.arange(<span class=\"number\">0.25</span>,<span class=\"number\">6</span>,<span class=\"number\">0.25</span>)</span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;alpha&#x27;</span>: alph_range&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model],cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;Lasso&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model] = Lasso()</span><br><span class=\"line\">alph_range = np.arange(<span class=\"number\">1e-4</span>,<span class=\"number\">1e-3</span>,<span class=\"number\">4e-5</span>)</span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;alpha&#x27;</span>: alph_range&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model=<span class=\"string\">&#x27;LinearSVR&#x27;</span></span><br><span class=\"line\">opt_models[model] = LinearSVR()</span><br><span class=\"line\"></span><br><span class=\"line\">crange = np.arange(<span class=\"number\">0.1</span>,<span class=\"number\">1.0</span>,<span class=\"number\">0.1</span>)</span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;C&#x27;</span>:crange,</span><br><span class=\"line\">             <span class=\"string\">&#x27;max_iter&#x27;</span>:[<span class=\"number\">1000</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=repeats)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model =<span class=\"string\">&#x27;ElasticNet&#x27;</span></span><br><span class=\"line\">opt_models[model] = ElasticNet()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;alpha&#x27;</span>: np.arange(<span class=\"number\">1e-4</span>,<span class=\"number\">1e-3</span>,<span class=\"number\">1e-4</span>),</span><br><span class=\"line\">              <span class=\"string\">&#x27;l1_ratio&#x27;</span>: np.arange(<span class=\"number\">0.1</span>,<span class=\"number\">1.0</span>,<span class=\"number\">0.1</span>),</span><br><span class=\"line\">              <span class=\"string\">&#x27;max_iter&#x27;</span>:[<span class=\"number\">100000</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;KNeighbors&#x27;</span></span><br><span class=\"line\">opt_models[model] = KNeighborsRegressor()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;n_neighbors&#x27;</span>:np.arange(<span class=\"number\">3</span>,<span class=\"number\">11</span>,<span class=\"number\">1</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;GradientBoosting&#x27;</span></span><br><span class=\"line\">opt_models[model] = GradientBoostingRegressor()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;n_estimators&#x27;</span>:[<span class=\"number\">150</span>,<span class=\"number\">250</span>,<span class=\"number\">350</span>],</span><br><span class=\"line\">              <span class=\"string\">&#x27;max_depth&#x27;</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">              <span class=\"string\">&#x27;min_samples_split&#x27;</span>:[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score, grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\">model = <span class=\"string\">&#x27;XGB&#x27;</span></span><br><span class=\"line\">opt_models[model] = XGBRegressor()</span><br><span class=\"line\"></span><br><span class=\"line\">param_grid = &#123;<span class=\"string\">&#x27;n_estimators&#x27;</span>:[<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">500</span>],</span><br><span class=\"line\">              <span class=\"string\">&#x27;max_depth&#x27;</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opt_models[model], cv_score,grid_results = train_model(opt_models[model], param_grid=param_grid,</span><br><span class=\"line\">                                              splits=splits, repeats=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cv_score.name = model</span><br><span class=\"line\">score_models = score_models.append(cv_score)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">model_predict</span>(<span class=\"params\">test_data,test_y=[],stack=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    <span class=\"comment\">#poly_trans=PolynomialFeatures(degree=2)</span></span><br><span class=\"line\">    <span class=\"comment\">#test_data1=poly_trans.fit_transform(test_data)</span></span><br><span class=\"line\">    <span class=\"comment\">#test_data=MinMaxScaler().fit_transform(test_data)</span></span><br><span class=\"line\">    i=<span class=\"number\">0</span></span><br><span class=\"line\">    y_predict_total = np.zeros((test_data.shape[<span class=\"number\">0</span>],))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> model <span class=\"keyword\">in</span> opt_models.keys():</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> model!=<span class=\"string\">&#x27;LinearSVR&#x27;</span> <span class=\"keyword\">and</span> model!=<span class=\"string\">&#x27;KNeighbors&#x27;</span>:</span><br><span class=\"line\">            y_predict=opt_models[model].predict(test_data)</span><br><span class=\"line\">            y_predict=y_predict.ravel()</span><br><span class=\"line\">            y_predict_total+=y_predict</span><br><span class=\"line\">            i+=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(test_y)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;&#125;_mse:&quot;</span>.<span class=\"built_in\">format</span>(model),mean_squared_error(y_predict,test_y))</span><br><span class=\"line\">    y_predict_mean=np.<span class=\"built_in\">round</span>(y_predict_total/i,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(test_y)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;mean_mse:&quot;</span>,mean_squared_error(y_predict_mean,test_y))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        y_predict_mean=pd.Series(y_predict_mean)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y_predict_mean</span><br><span class=\"line\">model_predict(X_valid,y_valid)</span><br><span class=\"line\">df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">df_test = np.array(df_test).reshape(<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;KNeighbors&#x27;</span>]</span><br><span class=\"line\">res1 = model.predict(df_test)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;XGB&#x27;</span>]</span><br><span class=\"line\">res2 = model.predict(df_test)</span><br><span class=\"line\">res = (res1+res2)/<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># plot KNN</span></span><br><span class=\"line\">x_1 = X_train.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">x_2 = X_valid.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">y_train = y_train.ravel()</span><br><span class=\"line\">y_valid = y_train.ravel()</span><br><span class=\"line\">plt.scatter(x_1,y_train,s = <span class=\"number\">10</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;orange&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">res1=res1.ravel()</span><br><span class=\"line\">res1=res1[<span class=\"number\">0</span>]</span><br><span class=\"line\">df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">df_test = df_test.iloc[<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">plt.scatter(df_test,res1,s = <span class=\"number\">30</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;b&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;KNeighbors&#x27;</span>]</span><br><span class=\"line\">z = model.predict(X_valid)</span><br><span class=\"line\">z = z.ravel()</span><br><span class=\"line\">plt.scatter(x_2,z,s = <span class=\"number\">20</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;k&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;KNN Regressor&#x27;</span>)</span><br><span class=\"line\">plt.show(block=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># plot XGB</span></span><br><span class=\"line\">x_1 = X_train.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">x_2 = X_valid.iloc[:,<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">y_train = y_train.ravel()</span><br><span class=\"line\">y_valid = y_train.ravel()</span><br><span class=\"line\">plt.scatter(x_1,y_train,s = <span class=\"number\">10</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;orange&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">res2=res2.ravel()</span><br><span class=\"line\">res2=res2[<span class=\"number\">0</span>]</span><br><span class=\"line\">df_test = x.iloc[<span class=\"number\">355</span>]</span><br><span class=\"line\">df_test = df_test.iloc[<span class=\"number\">0</span>] <span class=\"comment\"># 0or1</span></span><br><span class=\"line\">plt.scatter(df_test,res2,s = <span class=\"number\">30</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;b&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">model = opt_models[<span class=\"string\">&#x27;XGB&#x27;</span>]</span><br><span class=\"line\">z = model.predict(X_valid)</span><br><span class=\"line\">z = z.ravel()</span><br><span class=\"line\">plt.scatter(x_2,z,s = <span class=\"number\">20</span>*<span class=\"number\">10</span>,c=<span class=\"string\">&#x27;k&#x27;</span>,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;XGB&#x27;</span>)</span><br><span class=\"line\">plt.show(block=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> operator</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> MinMaxScaler</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">data = pd.read_csv(<span class=\"string\">&#x27;data.csv&#x27;</span>)</span><br><span class=\"line\">difficulty = pd.read_csv(<span class=\"string\">&#x27;difficulty.csv&#x27;</span>)</span><br><span class=\"line\">y = pd.read_csv(<span class=\"string\">&#x27;y.csv&#x27;</span>)</span><br><span class=\"line\">word = data.iloc[:,<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">count_each_char_sort_value</span>(<span class=\"params\"><span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"built_in\">dict</span>[i] = <span class=\"built_in\">dict</span>.get(i, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">dict</span> = <span class=\"built_in\">sorted</span>(<span class=\"built_in\">dict</span>.items(), key=operator.itemgetter(<span class=\"number\">1</span>), reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dict</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">355</span>):</span><br><span class=\"line\">    x.append(count_each_char_sort_value(word[i]))</span><br><span class=\"line\">x_pd = pd.DataFrame(x)</span><br><span class=\"line\"></span><br><span class=\"line\">first_char = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">355</span>):</span><br><span class=\"line\">    first_char.append(<span class=\"built_in\">ord</span>(word[i][<span class=\"number\">0</span>])-<span class=\"number\">97</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">repeat_char = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">355</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x_pd.iloc[i,<span class=\"number\">4</span>]==<span class=\"literal\">None</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x_pd.iloc[i,<span class=\"number\">3</span>]==<span class=\"literal\">None</span>):</span><br><span class=\"line\">            repeat_char.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            repeat_char.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        repeat_char.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">df1 = pd.DataFrame(repeat_char, columns=[<span class=\"string\">&#x27;repeat&#x27;</span>])</span><br><span class=\"line\">df1.insert(<span class=\"number\">1</span>, <span class=\"string\">&#x27;first_char&#x27;</span>, first_char,allow_duplicates = <span class=\"literal\">False</span>)</span><br><span class=\"line\">df1.to_csv(<span class=\"string\">&#x27;x.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>对数据进行多个模型的拟合，取拟合效果最佳的模型为所选模型</p>\n<p>stack融合的投票机制我没搞，直接算的预测值平均值</p>\n<p>还有一个缺点是自变量选的不好，我知道自变量的正态分布和泛化程度都不符合要求（和因变量相关性也不高），所以我也没检验，不自取其辱了，哈哈哈</p>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MCM2023_zhaojb\"\n        data-repo-id=\"R_kgDOI_tjsA\"\n        data-category=\"General\"\n        data-category-id=\"DIC_kwDOI_tjsM4CUTms\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n"},{"title":"Cmake","date":"2023-03-02T11:32:00.000Z","_content":"\n<a href=\"https://juejin.cn/post/7184793007302901820\" target=\"_blank\" >参考文档</a>\n\n<a href=\"https://cmake.org/cmake/help/latest/\" target=\"_blank\" >官方文档</a>\n\n## 变量的简单使用：\n\n```cmake\nset(A ON)\nif (A)\n    message(STATUS \"${A}\")\n    message(STATUS \"${PROJECT_NAME}\")\n    message(STATUS \"${PROJECT_SOURCE_DIR}\")\n    message(STATUS \"${PROJECT_BINARY_DIR}\")\n```\n\n## 强制使用静态链接：\n\n```cmake\nset(CMAKE_EXE_LINKER_FLAGS \"-static\")\n```\n\n## 改可执行文件名：\n\n```cmake\nadd_executable(use_easyx main.cpp)\n```\n\n## 链接库：\n\n```cmake\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\ntarget_link_libraries(use_easyx easyx)\n```\n\n## include链接目录（头文件）：\n\n```cmake\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n```\n\n## 添加子项目目录：\n\n```cmake\nadd_subdirectory()\n```\n\n## 文件：\n\n```cmake\nflie(GLOB TEST\n        \"${PROJECT_SOURCE_DIR}/*.h\" #只是当前目录下的.h文件存到变量TEST里，不会递归查找\n        \"${PROJECT_SOURCE_DIR}/*.cpp\"\n        )\naux_source_directory(${PROJECT_SOURCE_DIR}/src TEST2) #所有资源文件列表存到TEST2里面\nforeach(c $(TEST))\n    # 遍历\nendforeach()\n```\n\n## 外部命令：\n\n```cmake\nexecute_process(COMMAND git clone https://github.com/<username>/<repository>.git\n                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/deps/<repository>)\n```\n\n## 包管理：\n\n```cmake\ninclude(FetchContent)#引入功能模块\n\nFetchContent_Declare(\n        my-logger  \t\t #项目名称\n        GIT_REPOSITORY https://github.com/ACking-you/my-logger.git #仓库地址\n        GIT_TAG        v1.6.2  #仓库的版本tag\n        GIT_SHALLOW TRUE    #是否只拉取最新的记录\n)\nFetchContent_MakeAvailable(my-logger)\n\nadd_excutable(main ${SRC})\n#链接到程序进行使用\ntarget_link_libraries(main my-logger)\n```\n\n这样引入第三方库的好处显而易见，优点类似于包管理的效果了，但缺少了最关键的中心仓库来确保资源的有效和稳定。参考golang再做个proxy层级就好了。 同样可以拉取最新的googletest可以使用下列语句：\n\n```cmake\nFetchContent_Declare(\n        googletest\n        GIT_REPOSITORY https://github.com/google/googletest.git\n        GIT_TAG        release-1.12.1\n        GIT_SHALLOW TRUE\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n\ntarget_link_libraries(main gtest_main)\n```\n\nvcpkg有空了解一下（备忘）\n\n未完待续.......\n","source":"_posts/Cmake.md","raw":"---\ntitle: Cmake\ndate: 2023-03-02 19:32:00\ntags:\n  - 教程\n  - 学习笔记\n---\n\n<a href=\"https://juejin.cn/post/7184793007302901820\" target=\"_blank\" >参考文档</a>\n\n<a href=\"https://cmake.org/cmake/help/latest/\" target=\"_blank\" >官方文档</a>\n\n## 变量的简单使用：\n\n```cmake\nset(A ON)\nif (A)\n    message(STATUS \"${A}\")\n    message(STATUS \"${PROJECT_NAME}\")\n    message(STATUS \"${PROJECT_SOURCE_DIR}\")\n    message(STATUS \"${PROJECT_BINARY_DIR}\")\n```\n\n## 强制使用静态链接：\n\n```cmake\nset(CMAKE_EXE_LINKER_FLAGS \"-static\")\n```\n\n## 改可执行文件名：\n\n```cmake\nadd_executable(use_easyx main.cpp)\n```\n\n## 链接库：\n\n```cmake\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\ntarget_link_libraries(use_easyx easyx)\n```\n\n## include链接目录（头文件）：\n\n```cmake\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n```\n\n## 添加子项目目录：\n\n```cmake\nadd_subdirectory()\n```\n\n## 文件：\n\n```cmake\nflie(GLOB TEST\n        \"${PROJECT_SOURCE_DIR}/*.h\" #只是当前目录下的.h文件存到变量TEST里，不会递归查找\n        \"${PROJECT_SOURCE_DIR}/*.cpp\"\n        )\naux_source_directory(${PROJECT_SOURCE_DIR}/src TEST2) #所有资源文件列表存到TEST2里面\nforeach(c $(TEST))\n    # 遍历\nendforeach()\n```\n\n## 外部命令：\n\n```cmake\nexecute_process(COMMAND git clone https://github.com/<username>/<repository>.git\n                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/deps/<repository>)\n```\n\n## 包管理：\n\n```cmake\ninclude(FetchContent)#引入功能模块\n\nFetchContent_Declare(\n        my-logger  \t\t #项目名称\n        GIT_REPOSITORY https://github.com/ACking-you/my-logger.git #仓库地址\n        GIT_TAG        v1.6.2  #仓库的版本tag\n        GIT_SHALLOW TRUE    #是否只拉取最新的记录\n)\nFetchContent_MakeAvailable(my-logger)\n\nadd_excutable(main ${SRC})\n#链接到程序进行使用\ntarget_link_libraries(main my-logger)\n```\n\n这样引入第三方库的好处显而易见，优点类似于包管理的效果了，但缺少了最关键的中心仓库来确保资源的有效和稳定。参考golang再做个proxy层级就好了。 同样可以拉取最新的googletest可以使用下列语句：\n\n```cmake\nFetchContent_Declare(\n        googletest\n        GIT_REPOSITORY https://github.com/google/googletest.git\n        GIT_TAG        release-1.12.1\n        GIT_SHALLOW TRUE\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n\ntarget_link_libraries(main gtest_main)\n```\n\nvcpkg有空了解一下（备忘）\n\n未完待续.......\n","slug":"Cmake","published":1,"updated":"2023-03-02T13:11:24.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b6v0003ywvfgr04clt3","content":"<p><a href=\"https://juejin.cn/post/7184793007302901820\" target=\"_blank\" >参考文档</a></p>\n<p><a href=\"https://cmake.org/cmake/help/latest/\" target=\"_blank\" >官方文档</a></p>\n<h2 id=\"变量的简单使用：\"><a href=\"#变量的简单使用：\" class=\"headerlink\" title=\"变量的简单使用：\"></a>变量的简单使用：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(A <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (A)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;A&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;PROJECT_NAME&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制使用静态链接：\"><a href=\"#强制使用静态链接：\" class=\"headerlink\" title=\"强制使用静态链接：\"></a>强制使用静态链接：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_EXE_LINKER_FLAGS <span class=\"string\">&quot;-static&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"改可执行文件名：\"><a href=\"#改可执行文件名：\" class=\"headerlink\" title=\"改可执行文件名：\"></a>改可执行文件名：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(use_easyx main.cpp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接库：\"><a href=\"#链接库：\" class=\"headerlink\" title=\"链接库：\"></a>链接库：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">link_directories</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(use_easyx easyx)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"include链接目录（头文件）：\"><a href=\"#include链接目录（头文件）：\" class=\"headerlink\" title=\"include链接目录（头文件）：\"></a>include链接目录（头文件）：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加子项目目录：\"><a href=\"#添加子项目目录：\" class=\"headerlink\" title=\"添加子项目目录：\"></a>添加子项目目录：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件：\"><a href=\"#文件：\" class=\"headerlink\" title=\"文件：\"></a>文件：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">flie(GLOB <span class=\"keyword\">TEST</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.h&quot;</span> <span class=\"comment\">#只是当前目录下的.h文件存到变量TEST里，不会递归查找</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.cpp&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src TEST2) <span class=\"comment\">#所有资源文件列表存到TEST2里面</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(c $(<span class=\"keyword\">TEST</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"外部命令：\"><a href=\"#外部命令：\" class=\"headerlink\" title=\"外部命令：\"></a>外部命令：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">execute_process</span>(<span class=\"keyword\">COMMAND</span> git clone https://github.com/&lt;username&gt;/&lt;repository&gt;.git</span><br><span class=\"line\">                WORKING_DIRECTORY <span class=\"variable\">$&#123;CMAKE_BINARY_DIR&#125;</span>/deps/&lt;repository&gt;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理：\"><a href=\"#包管理：\" class=\"headerlink\" title=\"包管理：\"></a>包管理：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(FetchContent)<span class=\"comment\">#引入功能模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">FetchContent_Declare(</span><br><span class=\"line\">        my-logger  \t\t <span class=\"comment\">#项目名称</span></span><br><span class=\"line\">        GIT_REPOSITORY https://github.com/ACking-you/my-logger.git <span class=\"comment\">#仓库地址</span></span><br><span class=\"line\">        GIT_TAG        v1.<span class=\"number\">6.2</span>  <span class=\"comment\">#仓库的版本tag</span></span><br><span class=\"line\">        GIT_SHALLOW <span class=\"keyword\">TRUE</span>    <span class=\"comment\">#是否只拉取最新的记录</span></span><br><span class=\"line\">)</span><br><span class=\"line\">FetchContent_MakeAvailable(my-logger)</span><br><span class=\"line\"></span><br><span class=\"line\">add_excutable(main <span class=\"variable\">$&#123;SRC&#125;</span>)</span><br><span class=\"line\"><span class=\"comment\">#链接到程序进行使用</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(main my-logger)</span><br></pre></td></tr></table></figure>\n\n<p>这样引入第三方库的好处显而易见，优点类似于包管理的效果了，但缺少了最关键的中心仓库来确保资源的有效和稳定。参考golang再做个proxy层级就好了。 同样可以拉取最新的googletest可以使用下列语句：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">FetchContent_Declare(</span><br><span class=\"line\">        googletest</span><br><span class=\"line\">        GIT_REPOSITORY https://github.com/google/googletest.git</span><br><span class=\"line\">        GIT_TAG        release-<span class=\"number\">1.12</span>.<span class=\"number\">1</span></span><br><span class=\"line\">        GIT_SHALLOW <span class=\"keyword\">TRUE</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># For Windows: Prevent overriding the parent project&#x27;s compiler/linker settings</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(gtest_force_shared_crt <span class=\"keyword\">ON</span> CACHE BOOL <span class=\"string\">&quot;&quot;</span> FORCE)</span><br><span class=\"line\">FetchContent_MakeAvailable(googletest)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(main gtest_main)</span><br></pre></td></tr></table></figure>\n\n<p>vcpkg有空了解一下（备忘）</p>\n<p>未完待续…….</p>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<p><a href=\"https://juejin.cn/post/7184793007302901820\" target=\"_blank\" >参考文档</a></p>\n<p><a href=\"https://cmake.org/cmake/help/latest/\" target=\"_blank\" >官方文档</a></p>\n<h2 id=\"变量的简单使用：\"><a href=\"#变量的简单使用：\" class=\"headerlink\" title=\"变量的简单使用：\"></a>变量的简单使用：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(A <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (A)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;A&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;PROJECT_NAME&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制使用静态链接：\"><a href=\"#强制使用静态链接：\" class=\"headerlink\" title=\"强制使用静态链接：\"></a>强制使用静态链接：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_EXE_LINKER_FLAGS <span class=\"string\">&quot;-static&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"改可执行文件名：\"><a href=\"#改可执行文件名：\" class=\"headerlink\" title=\"改可执行文件名：\"></a>改可执行文件名：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(use_easyx main.cpp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接库：\"><a href=\"#链接库：\" class=\"headerlink\" title=\"链接库：\"></a>链接库：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">link_directories</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(use_easyx easyx)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"include链接目录（头文件）：\"><a href=\"#include链接目录（头文件）：\" class=\"headerlink\" title=\"include链接目录（头文件）：\"></a>include链接目录（头文件）：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加子项目目录：\"><a href=\"#添加子项目目录：\" class=\"headerlink\" title=\"添加子项目目录：\"></a>添加子项目目录：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件：\"><a href=\"#文件：\" class=\"headerlink\" title=\"文件：\"></a>文件：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">flie(GLOB <span class=\"keyword\">TEST</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.h&quot;</span> <span class=\"comment\">#只是当前目录下的.h文件存到变量TEST里，不会递归查找</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/*.cpp&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src TEST2) <span class=\"comment\">#所有资源文件列表存到TEST2里面</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(c $(<span class=\"keyword\">TEST</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"外部命令：\"><a href=\"#外部命令：\" class=\"headerlink\" title=\"外部命令：\"></a>外部命令：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">execute_process</span>(<span class=\"keyword\">COMMAND</span> git clone https://github.com/&lt;username&gt;/&lt;repository&gt;.git</span><br><span class=\"line\">                WORKING_DIRECTORY <span class=\"variable\">$&#123;CMAKE_BINARY_DIR&#125;</span>/deps/&lt;repository&gt;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理：\"><a href=\"#包管理：\" class=\"headerlink\" title=\"包管理：\"></a>包管理：</h2><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(FetchContent)<span class=\"comment\">#引入功能模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">FetchContent_Declare(</span><br><span class=\"line\">        my-logger  \t\t <span class=\"comment\">#项目名称</span></span><br><span class=\"line\">        GIT_REPOSITORY https://github.com/ACking-you/my-logger.git <span class=\"comment\">#仓库地址</span></span><br><span class=\"line\">        GIT_TAG        v1.<span class=\"number\">6.2</span>  <span class=\"comment\">#仓库的版本tag</span></span><br><span class=\"line\">        GIT_SHALLOW <span class=\"keyword\">TRUE</span>    <span class=\"comment\">#是否只拉取最新的记录</span></span><br><span class=\"line\">)</span><br><span class=\"line\">FetchContent_MakeAvailable(my-logger)</span><br><span class=\"line\"></span><br><span class=\"line\">add_excutable(main <span class=\"variable\">$&#123;SRC&#125;</span>)</span><br><span class=\"line\"><span class=\"comment\">#链接到程序进行使用</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(main my-logger)</span><br></pre></td></tr></table></figure>\n\n<p>这样引入第三方库的好处显而易见，优点类似于包管理的效果了，但缺少了最关键的中心仓库来确保资源的有效和稳定。参考golang再做个proxy层级就好了。 同样可以拉取最新的googletest可以使用下列语句：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">FetchContent_Declare(</span><br><span class=\"line\">        googletest</span><br><span class=\"line\">        GIT_REPOSITORY https://github.com/google/googletest.git</span><br><span class=\"line\">        GIT_TAG        release-<span class=\"number\">1.12</span>.<span class=\"number\">1</span></span><br><span class=\"line\">        GIT_SHALLOW <span class=\"keyword\">TRUE</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># For Windows: Prevent overriding the parent project&#x27;s compiler/linker settings</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(gtest_force_shared_crt <span class=\"keyword\">ON</span> CACHE BOOL <span class=\"string\">&quot;&quot;</span> FORCE)</span><br><span class=\"line\">FetchContent_MakeAvailable(googletest)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(main gtest_main)</span><br></pre></td></tr></table></figure>\n\n<p>vcpkg有空了解一下（备忘）</p>\n<p>未完待续…….</p>\n"},{"title":"第三届MathorCup","date":"2023-01-29T02:42:55.000Z","_content":"\n## 决策树\n\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom itertools import combinations\n\nif __name__ == \"__main__\":\n    mpl.rcParams['font.sans-serif'] = ['SimHei']\n    mpl.rcParams['axes.unicode_minus'] = False\n\n    feature = '网络覆盖与信号强度','语音通话清晰度','语音通话稳定性','是否遇到过网络问题','居民小区','办公室','高校','商业街','地铁','农村','高铁','其他，请注明','手机没有信号','有信号无法拨通','通话过程中突然中断','通话中有杂音、听不清、断断续续','串线','通话过程中一方听不见','其他，请注明.1','脱网次数','mos质差次数','未接通掉话次数','重定向次数','重定向驻留时长','ARPU（家庭宽带）','是否4G网络客户（本地剔除物联网）','当月ARPU','前3月ARPU','当月欠费金额','前第3个月欠费金额'\n    path = 'f1_.csv'  # 数据文件路径\n    data = pd.read_csv(path, header=None)\n    x_prime = data[list(range(1,31))]\n    y = pd.Categorical(data[0]).codes\n    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n    pairs = [c for c in combinations(range(1,31), 30)]\n    feature_pairs = []\n    num = len(pairs)\n    for i in range(num):\n        feature_pairs.append(list(pairs[i]))\n\n    for i, pair in enumerate(feature_pairs):\n        # 准备数据\n        x_train = x_prime_train[pair]\n        x_test = x_prime_test[pair]\n\n        # 决策树学习\n        model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=10, oob_score=True)\n        model.fit(x_train, y_train)\n        importance = model.feature_importances_\n        for j in range(0,30,3):\n            print(feature[j], ':', importance[j], feature[j+1], ':', importance[j+1]\n                  , feature[j+2], ':', importance[j+2])\n\n\n        # 训练集上的预测结果\n        y_train_pred = model.predict(x_train)\n        acc_train = accuracy_score(y_train, y_train_pred)\n        y_test_pred = model.predict(x_test)\n        acc_test = accuracy_score(y_test, y_test_pred)\n        print('OOB Score:', model.oob_score_)\n        print('\\t训练集准确率: %.4f%%' % (100*acc_train))\n        print('\\t测试集准确率: %.4f%%\\n' % (100*acc_test))\n```\n\nimportance里面有影响系数，如下：\n\n![](importance1.jpg)\n\n![](importance2.jpg)\n\n可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。\n\nbut, 很不幸，前三项是y，不是x，大悲（）\n\n但我头铁，死马当活马医，直接硬上。\n\n```python\nx_prime = train2\ny = pd.Categorical(y2[3]).codes\nx_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n\nfeature_pairs = [list(range(0, 51))]\nfor i, pair in enumerate(feature_pairs):\n    # 准备数据\n    x_train = x_prime_train[pair]\n    x_test = x_prime_test[pair]\n\n    # 决策树学习\n    model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=7, oob_score=True)\n    model.fit(x_train, y_train)\n    y_pre = model.predict(pre2)\n    for j in range(len(y_pre)):\n        y_pre[j] = y_pre[j] + 1\n```\n\n稍微小改一下，其实是一样的，就是换一下x和y\n\n不过意料之中，准确率很低......只有50%-60%左右\n\n然后我又尝试了一下bp神经网络\n\n## BP神经网络\n\n```python\n# 0. 超参数设置\nlr = 0.00002\nepochs = 300\nn_feature = 22\nn_hidden = 300\nn_output = 10\n\n# 1. 数据准备\ntrain1 = pd.read_csv('train1_.csv', header=None)\n# train2 = pd.read_csv('train2_.csv', header=None)\n\npre1 = pd.read_csv('pre1.csv', header=None)\n# pre2 = pd.read_csv('pre2.csv', header=None)\n\ny1 = pd.read_csv('f1_.csv', header=None)\n# y2 = pd.read_csv('f2_.csv', header=None)\n\n\nx_prime = train1\ny = pd.Categorical(y1[1]).codes\nx_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.2, random_state=22)\nx_train = np.array(x_p_train)\nx_pre = np.array(pre1)\nx_test = np.array(x_p_test)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.LongTensor(y_train)\nx_test = torch.FloatTensor(x_test)\ny_test = torch.LongTensor(y_test)\nx_pre = torch.FloatTensor(x_pre)\n\n\n# 2. 定义BP神经网络\nclass bpnnModel(torch.nn.Module):\n    def __init__(self, n_feature, n_hidden, n_output):\n        super(bpnnModel, self).__init__()\n        self.hidden = torch.nn.Linear(n_feature, n_hidden)  # 定义隐藏层网络\n        self.out = torch.nn.Linear(n_hidden, n_output)  # 定义输出层网络\n\n\n    def forward(self, x):\n        x = Fun.relu(self.hidden(x))  # 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh\n        out = Fun.softmax(self.out(x), dim=1)  # 输出层softmax激活函数\n        return out\n\n# 3. 定义优化器损失函数\nnet = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)  # 优化器选用随机梯度下降方式\nloss_func = torch.nn.CrossEntropyLoss()  # 对于多分类一般采用的交叉熵损失函数\n\n# 4. 训练数据\nloss_steps = np.zeros(epochs)\naccuracy_steps = np.zeros(epochs)\nfor epoch in range(epochs):\n    y_pred = net(x_train)  # 前向过程\n    loss = loss_func(y_pred, y_train)  # 输出与label对比\n    optimizer.zero_grad()  # 梯度清零\n    loss.backward()  # 反向传播\n    optimizer.step()  # 使用梯度优化器\n    loss_steps[epoch] = loss.item()  # 保存loss\nwith torch.no_grad():\n    y_pred = net(x_test)\n    y0 = net(x_pre)\n    y = torch.argmax(y0, dim=1)\n    correct = (torch.argmax(y_pred, dim=1) == y_test).type(torch.FloatTensor)\n    accuracy_steps[epoch] = correct.mean()\nprint(\"预测准确率\", accuracy_steps[-1])\n\n# 5 绘制损失函数和精度\nfig_name = '网络覆盖与信号强度(语音)'\nfontsize = 15\nfig, (ax1, ax2) = plt.subplots(2, figsize=(15, 12), sharex=True)\nax1.plot(accuracy_steps)\nax1.set_ylabel(\"test accuracy\", fontsize=fontsize)\nax1.set_title(fig_name, fontsize='xx-large')\nax2.plot(loss_steps)\nax2.set_ylabel(\"train loss\", fontsize=fontsize)\nax2.set_xlabel(\"epochs\", fontsize=fontsize)\nplt.tight_layout()\nplt.savefig(fig_name + '.png')\nplt.show()\nfor j in range(len(y)):\n    y[j] = y[j] + 1\ndata = pd.DataFrame(y)\ndata.to_csv('BP网络覆盖与信号强度(语音).csv', index=None)\n```\n\nemmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10...\n\n算了，就这样，直接交决策树，开摆。\n\n期待大佬留言评论。\n\n![](证书.png)\n\n意料之中，寄。\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_posts/MathorCup.md","raw":"---\ntitle: 第三届MathorCup\ndate: 2023-01-29 10:42:55\ntags:\n - 竞赛\ncategories:\n - 教程\n---\n\n## 决策树\n\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom itertools import combinations\n\nif __name__ == \"__main__\":\n    mpl.rcParams['font.sans-serif'] = ['SimHei']\n    mpl.rcParams['axes.unicode_minus'] = False\n\n    feature = '网络覆盖与信号强度','语音通话清晰度','语音通话稳定性','是否遇到过网络问题','居民小区','办公室','高校','商业街','地铁','农村','高铁','其他，请注明','手机没有信号','有信号无法拨通','通话过程中突然中断','通话中有杂音、听不清、断断续续','串线','通话过程中一方听不见','其他，请注明.1','脱网次数','mos质差次数','未接通掉话次数','重定向次数','重定向驻留时长','ARPU（家庭宽带）','是否4G网络客户（本地剔除物联网）','当月ARPU','前3月ARPU','当月欠费金额','前第3个月欠费金额'\n    path = 'f1_.csv'  # 数据文件路径\n    data = pd.read_csv(path, header=None)\n    x_prime = data[list(range(1,31))]\n    y = pd.Categorical(data[0]).codes\n    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n    pairs = [c for c in combinations(range(1,31), 30)]\n    feature_pairs = []\n    num = len(pairs)\n    for i in range(num):\n        feature_pairs.append(list(pairs[i]))\n\n    for i, pair in enumerate(feature_pairs):\n        # 准备数据\n        x_train = x_prime_train[pair]\n        x_test = x_prime_test[pair]\n\n        # 决策树学习\n        model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=10, oob_score=True)\n        model.fit(x_train, y_train)\n        importance = model.feature_importances_\n        for j in range(0,30,3):\n            print(feature[j], ':', importance[j], feature[j+1], ':', importance[j+1]\n                  , feature[j+2], ':', importance[j+2])\n\n\n        # 训练集上的预测结果\n        y_train_pred = model.predict(x_train)\n        acc_train = accuracy_score(y_train, y_train_pred)\n        y_test_pred = model.predict(x_test)\n        acc_test = accuracy_score(y_test, y_test_pred)\n        print('OOB Score:', model.oob_score_)\n        print('\\t训练集准确率: %.4f%%' % (100*acc_train))\n        print('\\t测试集准确率: %.4f%%\\n' % (100*acc_test))\n```\n\nimportance里面有影响系数，如下：\n\n![](importance1.jpg)\n\n![](importance2.jpg)\n\n可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。\n\nbut, 很不幸，前三项是y，不是x，大悲（）\n\n但我头铁，死马当活马医，直接硬上。\n\n```python\nx_prime = train2\ny = pd.Categorical(y2[3]).codes\nx_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n\nfeature_pairs = [list(range(0, 51))]\nfor i, pair in enumerate(feature_pairs):\n    # 准备数据\n    x_train = x_prime_train[pair]\n    x_test = x_prime_test[pair]\n\n    # 决策树学习\n    model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=7, oob_score=True)\n    model.fit(x_train, y_train)\n    y_pre = model.predict(pre2)\n    for j in range(len(y_pre)):\n        y_pre[j] = y_pre[j] + 1\n```\n\n稍微小改一下，其实是一样的，就是换一下x和y\n\n不过意料之中，准确率很低......只有50%-60%左右\n\n然后我又尝试了一下bp神经网络\n\n## BP神经网络\n\n```python\n# 0. 超参数设置\nlr = 0.00002\nepochs = 300\nn_feature = 22\nn_hidden = 300\nn_output = 10\n\n# 1. 数据准备\ntrain1 = pd.read_csv('train1_.csv', header=None)\n# train2 = pd.read_csv('train2_.csv', header=None)\n\npre1 = pd.read_csv('pre1.csv', header=None)\n# pre2 = pd.read_csv('pre2.csv', header=None)\n\ny1 = pd.read_csv('f1_.csv', header=None)\n# y2 = pd.read_csv('f2_.csv', header=None)\n\n\nx_prime = train1\ny = pd.Categorical(y1[1]).codes\nx_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.2, random_state=22)\nx_train = np.array(x_p_train)\nx_pre = np.array(pre1)\nx_test = np.array(x_p_test)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.LongTensor(y_train)\nx_test = torch.FloatTensor(x_test)\ny_test = torch.LongTensor(y_test)\nx_pre = torch.FloatTensor(x_pre)\n\n\n# 2. 定义BP神经网络\nclass bpnnModel(torch.nn.Module):\n    def __init__(self, n_feature, n_hidden, n_output):\n        super(bpnnModel, self).__init__()\n        self.hidden = torch.nn.Linear(n_feature, n_hidden)  # 定义隐藏层网络\n        self.out = torch.nn.Linear(n_hidden, n_output)  # 定义输出层网络\n\n\n    def forward(self, x):\n        x = Fun.relu(self.hidden(x))  # 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh\n        out = Fun.softmax(self.out(x), dim=1)  # 输出层softmax激活函数\n        return out\n\n# 3. 定义优化器损失函数\nnet = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)  # 优化器选用随机梯度下降方式\nloss_func = torch.nn.CrossEntropyLoss()  # 对于多分类一般采用的交叉熵损失函数\n\n# 4. 训练数据\nloss_steps = np.zeros(epochs)\naccuracy_steps = np.zeros(epochs)\nfor epoch in range(epochs):\n    y_pred = net(x_train)  # 前向过程\n    loss = loss_func(y_pred, y_train)  # 输出与label对比\n    optimizer.zero_grad()  # 梯度清零\n    loss.backward()  # 反向传播\n    optimizer.step()  # 使用梯度优化器\n    loss_steps[epoch] = loss.item()  # 保存loss\nwith torch.no_grad():\n    y_pred = net(x_test)\n    y0 = net(x_pre)\n    y = torch.argmax(y0, dim=1)\n    correct = (torch.argmax(y_pred, dim=1) == y_test).type(torch.FloatTensor)\n    accuracy_steps[epoch] = correct.mean()\nprint(\"预测准确率\", accuracy_steps[-1])\n\n# 5 绘制损失函数和精度\nfig_name = '网络覆盖与信号强度(语音)'\nfontsize = 15\nfig, (ax1, ax2) = plt.subplots(2, figsize=(15, 12), sharex=True)\nax1.plot(accuracy_steps)\nax1.set_ylabel(\"test accuracy\", fontsize=fontsize)\nax1.set_title(fig_name, fontsize='xx-large')\nax2.plot(loss_steps)\nax2.set_ylabel(\"train loss\", fontsize=fontsize)\nax2.set_xlabel(\"epochs\", fontsize=fontsize)\nplt.tight_layout()\nplt.savefig(fig_name + '.png')\nplt.show()\nfor j in range(len(y)):\n    y[j] = y[j] + 1\ndata = pd.DataFrame(y)\ndata.to_csv('BP网络覆盖与信号强度(语音).csv', index=None)\n```\n\nemmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10...\n\n算了，就这样，直接交决策树，开摆。\n\n期待大佬留言评论。\n\n![](证书.png)\n\n意料之中，寄。\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"MathorCup","published":1,"updated":"2023-03-05T02:32:48.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b750007ywvfg7180l77","content":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib <span class=\"keyword\">as</span> mpl</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    feature = <span class=\"string\">&#x27;网络覆盖与信号强度&#x27;</span>,<span class=\"string\">&#x27;语音通话清晰度&#x27;</span>,<span class=\"string\">&#x27;语音通话稳定性&#x27;</span>,<span class=\"string\">&#x27;是否遇到过网络问题&#x27;</span>,<span class=\"string\">&#x27;居民小区&#x27;</span>,<span class=\"string\">&#x27;办公室&#x27;</span>,<span class=\"string\">&#x27;高校&#x27;</span>,<span class=\"string\">&#x27;商业街&#x27;</span>,<span class=\"string\">&#x27;地铁&#x27;</span>,<span class=\"string\">&#x27;农村&#x27;</span>,<span class=\"string\">&#x27;高铁&#x27;</span>,<span class=\"string\">&#x27;其他，请注明&#x27;</span>,<span class=\"string\">&#x27;手机没有信号&#x27;</span>,<span class=\"string\">&#x27;有信号无法拨通&#x27;</span>,<span class=\"string\">&#x27;通话过程中突然中断&#x27;</span>,<span class=\"string\">&#x27;通话中有杂音、听不清、断断续续&#x27;</span>,<span class=\"string\">&#x27;串线&#x27;</span>,<span class=\"string\">&#x27;通话过程中一方听不见&#x27;</span>,<span class=\"string\">&#x27;其他，请注明.1&#x27;</span>,<span class=\"string\">&#x27;脱网次数&#x27;</span>,<span class=\"string\">&#x27;mos质差次数&#x27;</span>,<span class=\"string\">&#x27;未接通掉话次数&#x27;</span>,<span class=\"string\">&#x27;重定向次数&#x27;</span>,<span class=\"string\">&#x27;重定向驻留时长&#x27;</span>,<span class=\"string\">&#x27;ARPU（家庭宽带）&#x27;</span>,<span class=\"string\">&#x27;是否4G网络客户（本地剔除物联网）&#x27;</span>,<span class=\"string\">&#x27;当月ARPU&#x27;</span>,<span class=\"string\">&#x27;前3月ARPU&#x27;</span>,<span class=\"string\">&#x27;当月欠费金额&#x27;</span>,<span class=\"string\">&#x27;前第3个月欠费金额&#x27;</span></span><br><span class=\"line\">    path = <span class=\"string\">&#x27;f1_.csv&#x27;</span>  <span class=\"comment\"># 数据文件路径</span></span><br><span class=\"line\">    data = pd.read_csv(path, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    x_prime = data[<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>))]</span><br><span class=\"line\">    y = pd.Categorical(data[<span class=\"number\">0</span>]).codes</span><br><span class=\"line\">    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\">    pairs = [c <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> combinations(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>), <span class=\"number\">30</span>)]</span><br><span class=\"line\">    feature_pairs = []</span><br><span class=\"line\">    num = <span class=\"built_in\">len</span>(pairs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        feature_pairs.append(<span class=\"built_in\">list</span>(pairs[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">        <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">        x_train = x_prime_train[pair]</span><br><span class=\"line\">        x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">        model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">10</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        model.fit(x_train, y_train)</span><br><span class=\"line\">        importance = model.feature_importances_</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">30</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(feature[j], <span class=\"string\">&#x27;:&#x27;</span>, importance[j], feature[j+<span class=\"number\">1</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">                  , feature[j+<span class=\"number\">2</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练集上的预测结果</span></span><br><span class=\"line\">        y_train_pred = model.predict(x_train)</span><br><span class=\"line\">        acc_train = accuracy_score(y_train, y_train_pred)</span><br><span class=\"line\">        y_test_pred = model.predict(x_test)</span><br><span class=\"line\">        acc_test = accuracy_score(y_test, y_test_pred)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;OOB Score:&#x27;</span>, model.oob_score_)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t训练集准确率: %.4f%%&#x27;</span> % (<span class=\"number\">100</span>*acc_train))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t测试集准确率: %.4f%%\\n&#x27;</span> % (<span class=\"number\">100</span>*acc_test))</span><br></pre></td></tr></table></figure>\n\n<p>importance里面有影响系数，如下：</p>\n<p><img src=\"/2023/01/29/MathorCup/importance1.jpg\"></p>\n<p><img src=\"/2023/01/29/MathorCup/importance2.jpg\"></p>\n<p>可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。</p>\n<p>but, 很不幸，前三项是y，不是x，大悲（）</p>\n<p>但我头铁，死马当活马医，直接硬上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x_prime = train2</span><br><span class=\"line\">y = pd.Categorical(y2[<span class=\"number\">3</span>]).codes</span><br><span class=\"line\">x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_pairs = [<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">51</span>))]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">    <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">    x_train = x_prime_train[pair]</span><br><span class=\"line\">    x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">    model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">7</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    model.fit(x_train, y_train)</span><br><span class=\"line\">    y_pre = model.predict(pre2)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y_pre)):</span><br><span class=\"line\">        y_pre[j] = y_pre[j] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>稍微小改一下，其实是一样的，就是换一下x和y</p>\n<p>不过意料之中，准确率很低……只有50%-60%左右</p>\n<p>然后我又尝试了一下bp神经网络</p>\n<h2 id=\"BP神经网络\"><a href=\"#BP神经网络\" class=\"headerlink\" title=\"BP神经网络\"></a>BP神经网络</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0. 超参数设置</span></span><br><span class=\"line\">lr = <span class=\"number\">0.00002</span></span><br><span class=\"line\">epochs = <span class=\"number\">300</span></span><br><span class=\"line\">n_feature = <span class=\"number\">22</span></span><br><span class=\"line\">n_hidden = <span class=\"number\">300</span></span><br><span class=\"line\">n_output = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 数据准备</span></span><br><span class=\"line\">train1 = pd.read_csv(<span class=\"string\">&#x27;train1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># train2 = pd.read_csv(&#x27;train2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">pre1 = pd.read_csv(<span class=\"string\">&#x27;pre1.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># pre2 = pd.read_csv(&#x27;pre2.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">y1 = pd.read_csv(<span class=\"string\">&#x27;f1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># y2 = pd.read_csv(&#x27;f2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x_prime = train1</span><br><span class=\"line\">y = pd.Categorical(y1[<span class=\"number\">1</span>]).codes</span><br><span class=\"line\">x_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">22</span>)</span><br><span class=\"line\">x_train = np.array(x_p_train)</span><br><span class=\"line\">x_pre = np.array(pre1)</span><br><span class=\"line\">x_test = np.array(x_p_test)</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = torch.FloatTensor(x_train)</span><br><span class=\"line\">y_train = torch.LongTensor(y_train)</span><br><span class=\"line\">x_test = torch.FloatTensor(x_test)</span><br><span class=\"line\">y_test = torch.LongTensor(y_test)</span><br><span class=\"line\">x_pre = torch.FloatTensor(x_pre)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 定义BP神经网络</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">bpnnModel</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, n_feature, n_hidden, n_output</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(bpnnModel, self).__init__()</span><br><span class=\"line\">        self.hidden = torch.nn.Linear(n_feature, n_hidden)  <span class=\"comment\"># 定义隐藏层网络</span></span><br><span class=\"line\">        self.out = torch.nn.Linear(n_hidden, n_output)  <span class=\"comment\"># 定义输出层网络</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = Fun.relu(self.hidden(x))  <span class=\"comment\"># 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh</span></span><br><span class=\"line\">        out = Fun.softmax(self.out(x), dim=<span class=\"number\">1</span>)  <span class=\"comment\"># 输出层softmax激活函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 定义优化器损失函数</span></span><br><span class=\"line\">net = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)</span><br><span class=\"line\">optimizer = torch.optim.Adam(net.parameters(), lr=lr)  <span class=\"comment\"># 优化器选用随机梯度下降方式</span></span><br><span class=\"line\">loss_func = torch.nn.CrossEntropyLoss()  <span class=\"comment\"># 对于多分类一般采用的交叉熵损失函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 训练数据</span></span><br><span class=\"line\">loss_steps = np.zeros(epochs)</span><br><span class=\"line\">accuracy_steps = np.zeros(epochs)</span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">    y_pred = net(x_train)  <span class=\"comment\"># 前向过程</span></span><br><span class=\"line\">    loss = loss_func(y_pred, y_train)  <span class=\"comment\"># 输出与label对比</span></span><br><span class=\"line\">    optimizer.zero_grad()  <span class=\"comment\"># 梯度清零</span></span><br><span class=\"line\">    loss.backward()  <span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">    optimizer.step()  <span class=\"comment\"># 使用梯度优化器</span></span><br><span class=\"line\">    loss_steps[epoch] = loss.item()  <span class=\"comment\"># 保存loss</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">    y_pred = net(x_test)</span><br><span class=\"line\">    y0 = net(x_pre)</span><br><span class=\"line\">    y = torch.argmax(y0, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">    correct = (torch.argmax(y_pred, dim=<span class=\"number\">1</span>) == y_test).<span class=\"built_in\">type</span>(torch.FloatTensor)</span><br><span class=\"line\">    accuracy_steps[epoch] = correct.mean()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;预测准确率&quot;</span>, accuracy_steps[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 绘制损失函数和精度</span></span><br><span class=\"line\">fig_name = <span class=\"string\">&#x27;网络覆盖与信号强度(语音)&#x27;</span></span><br><span class=\"line\">fontsize = <span class=\"number\">15</span></span><br><span class=\"line\">fig, (ax1, ax2) = plt.subplots(<span class=\"number\">2</span>, figsize=(<span class=\"number\">15</span>, <span class=\"number\">12</span>), sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">ax1.plot(accuracy_steps)</span><br><span class=\"line\">ax1.set_ylabel(<span class=\"string\">&quot;test accuracy&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax1.set_title(fig_name, fontsize=<span class=\"string\">&#x27;xx-large&#x27;</span>)</span><br><span class=\"line\">ax2.plot(loss_steps)</span><br><span class=\"line\">ax2.set_ylabel(<span class=\"string\">&quot;train loss&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax2.set_xlabel(<span class=\"string\">&quot;epochs&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">plt.tight_layout()</span><br><span class=\"line\">plt.savefig(fig_name + <span class=\"string\">&#x27;.png&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y)):</span><br><span class=\"line\">    y[j] = y[j] + <span class=\"number\">1</span></span><br><span class=\"line\">data = pd.DataFrame(y)</span><br><span class=\"line\">data.to_csv(<span class=\"string\">&#x27;BP网络覆盖与信号强度(语音).csv&#x27;</span>, index=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>emmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10…</p>\n<p>算了，就这样，直接交决策树，开摆。</p>\n<p>期待大佬留言评论。</p>\n<p><img src=\"/2023/01/29/MathorCup/%E8%AF%81%E4%B9%A6.png\"></p>\n<p>意料之中，寄。</p>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib <span class=\"keyword\">as</span> mpl</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    feature = <span class=\"string\">&#x27;网络覆盖与信号强度&#x27;</span>,<span class=\"string\">&#x27;语音通话清晰度&#x27;</span>,<span class=\"string\">&#x27;语音通话稳定性&#x27;</span>,<span class=\"string\">&#x27;是否遇到过网络问题&#x27;</span>,<span class=\"string\">&#x27;居民小区&#x27;</span>,<span class=\"string\">&#x27;办公室&#x27;</span>,<span class=\"string\">&#x27;高校&#x27;</span>,<span class=\"string\">&#x27;商业街&#x27;</span>,<span class=\"string\">&#x27;地铁&#x27;</span>,<span class=\"string\">&#x27;农村&#x27;</span>,<span class=\"string\">&#x27;高铁&#x27;</span>,<span class=\"string\">&#x27;其他，请注明&#x27;</span>,<span class=\"string\">&#x27;手机没有信号&#x27;</span>,<span class=\"string\">&#x27;有信号无法拨通&#x27;</span>,<span class=\"string\">&#x27;通话过程中突然中断&#x27;</span>,<span class=\"string\">&#x27;通话中有杂音、听不清、断断续续&#x27;</span>,<span class=\"string\">&#x27;串线&#x27;</span>,<span class=\"string\">&#x27;通话过程中一方听不见&#x27;</span>,<span class=\"string\">&#x27;其他，请注明.1&#x27;</span>,<span class=\"string\">&#x27;脱网次数&#x27;</span>,<span class=\"string\">&#x27;mos质差次数&#x27;</span>,<span class=\"string\">&#x27;未接通掉话次数&#x27;</span>,<span class=\"string\">&#x27;重定向次数&#x27;</span>,<span class=\"string\">&#x27;重定向驻留时长&#x27;</span>,<span class=\"string\">&#x27;ARPU（家庭宽带）&#x27;</span>,<span class=\"string\">&#x27;是否4G网络客户（本地剔除物联网）&#x27;</span>,<span class=\"string\">&#x27;当月ARPU&#x27;</span>,<span class=\"string\">&#x27;前3月ARPU&#x27;</span>,<span class=\"string\">&#x27;当月欠费金额&#x27;</span>,<span class=\"string\">&#x27;前第3个月欠费金额&#x27;</span></span><br><span class=\"line\">    path = <span class=\"string\">&#x27;f1_.csv&#x27;</span>  <span class=\"comment\"># 数据文件路径</span></span><br><span class=\"line\">    data = pd.read_csv(path, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    x_prime = data[<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>))]</span><br><span class=\"line\">    y = pd.Categorical(data[<span class=\"number\">0</span>]).codes</span><br><span class=\"line\">    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\">    pairs = [c <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> combinations(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>), <span class=\"number\">30</span>)]</span><br><span class=\"line\">    feature_pairs = []</span><br><span class=\"line\">    num = <span class=\"built_in\">len</span>(pairs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        feature_pairs.append(<span class=\"built_in\">list</span>(pairs[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">        <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">        x_train = x_prime_train[pair]</span><br><span class=\"line\">        x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">        model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">10</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        model.fit(x_train, y_train)</span><br><span class=\"line\">        importance = model.feature_importances_</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">30</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(feature[j], <span class=\"string\">&#x27;:&#x27;</span>, importance[j], feature[j+<span class=\"number\">1</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">                  , feature[j+<span class=\"number\">2</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练集上的预测结果</span></span><br><span class=\"line\">        y_train_pred = model.predict(x_train)</span><br><span class=\"line\">        acc_train = accuracy_score(y_train, y_train_pred)</span><br><span class=\"line\">        y_test_pred = model.predict(x_test)</span><br><span class=\"line\">        acc_test = accuracy_score(y_test, y_test_pred)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;OOB Score:&#x27;</span>, model.oob_score_)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t训练集准确率: %.4f%%&#x27;</span> % (<span class=\"number\">100</span>*acc_train))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t测试集准确率: %.4f%%\\n&#x27;</span> % (<span class=\"number\">100</span>*acc_test))</span><br></pre></td></tr></table></figure>\n\n<p>importance里面有影响系数，如下：</p>\n<p><img src=\"/2023/01/29/MathorCup/importance1.jpg\"></p>\n<p><img src=\"/2023/01/29/MathorCup/importance2.jpg\"></p>\n<p>可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。</p>\n<p>but, 很不幸，前三项是y，不是x，大悲（）</p>\n<p>但我头铁，死马当活马医，直接硬上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x_prime = train2</span><br><span class=\"line\">y = pd.Categorical(y2[<span class=\"number\">3</span>]).codes</span><br><span class=\"line\">x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_pairs = [<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">51</span>))]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">    <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">    x_train = x_prime_train[pair]</span><br><span class=\"line\">    x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">    model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">7</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    model.fit(x_train, y_train)</span><br><span class=\"line\">    y_pre = model.predict(pre2)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y_pre)):</span><br><span class=\"line\">        y_pre[j] = y_pre[j] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>稍微小改一下，其实是一样的，就是换一下x和y</p>\n<p>不过意料之中，准确率很低……只有50%-60%左右</p>\n<p>然后我又尝试了一下bp神经网络</p>\n<h2 id=\"BP神经网络\"><a href=\"#BP神经网络\" class=\"headerlink\" title=\"BP神经网络\"></a>BP神经网络</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0. 超参数设置</span></span><br><span class=\"line\">lr = <span class=\"number\">0.00002</span></span><br><span class=\"line\">epochs = <span class=\"number\">300</span></span><br><span class=\"line\">n_feature = <span class=\"number\">22</span></span><br><span class=\"line\">n_hidden = <span class=\"number\">300</span></span><br><span class=\"line\">n_output = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 数据准备</span></span><br><span class=\"line\">train1 = pd.read_csv(<span class=\"string\">&#x27;train1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># train2 = pd.read_csv(&#x27;train2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">pre1 = pd.read_csv(<span class=\"string\">&#x27;pre1.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># pre2 = pd.read_csv(&#x27;pre2.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">y1 = pd.read_csv(<span class=\"string\">&#x27;f1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># y2 = pd.read_csv(&#x27;f2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x_prime = train1</span><br><span class=\"line\">y = pd.Categorical(y1[<span class=\"number\">1</span>]).codes</span><br><span class=\"line\">x_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">22</span>)</span><br><span class=\"line\">x_train = np.array(x_p_train)</span><br><span class=\"line\">x_pre = np.array(pre1)</span><br><span class=\"line\">x_test = np.array(x_p_test)</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = torch.FloatTensor(x_train)</span><br><span class=\"line\">y_train = torch.LongTensor(y_train)</span><br><span class=\"line\">x_test = torch.FloatTensor(x_test)</span><br><span class=\"line\">y_test = torch.LongTensor(y_test)</span><br><span class=\"line\">x_pre = torch.FloatTensor(x_pre)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 定义BP神经网络</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">bpnnModel</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, n_feature, n_hidden, n_output</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(bpnnModel, self).__init__()</span><br><span class=\"line\">        self.hidden = torch.nn.Linear(n_feature, n_hidden)  <span class=\"comment\"># 定义隐藏层网络</span></span><br><span class=\"line\">        self.out = torch.nn.Linear(n_hidden, n_output)  <span class=\"comment\"># 定义输出层网络</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = Fun.relu(self.hidden(x))  <span class=\"comment\"># 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh</span></span><br><span class=\"line\">        out = Fun.softmax(self.out(x), dim=<span class=\"number\">1</span>)  <span class=\"comment\"># 输出层softmax激活函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 定义优化器损失函数</span></span><br><span class=\"line\">net = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)</span><br><span class=\"line\">optimizer = torch.optim.Adam(net.parameters(), lr=lr)  <span class=\"comment\"># 优化器选用随机梯度下降方式</span></span><br><span class=\"line\">loss_func = torch.nn.CrossEntropyLoss()  <span class=\"comment\"># 对于多分类一般采用的交叉熵损失函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 训练数据</span></span><br><span class=\"line\">loss_steps = np.zeros(epochs)</span><br><span class=\"line\">accuracy_steps = np.zeros(epochs)</span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">    y_pred = net(x_train)  <span class=\"comment\"># 前向过程</span></span><br><span class=\"line\">    loss = loss_func(y_pred, y_train)  <span class=\"comment\"># 输出与label对比</span></span><br><span class=\"line\">    optimizer.zero_grad()  <span class=\"comment\"># 梯度清零</span></span><br><span class=\"line\">    loss.backward()  <span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">    optimizer.step()  <span class=\"comment\"># 使用梯度优化器</span></span><br><span class=\"line\">    loss_steps[epoch] = loss.item()  <span class=\"comment\"># 保存loss</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">    y_pred = net(x_test)</span><br><span class=\"line\">    y0 = net(x_pre)</span><br><span class=\"line\">    y = torch.argmax(y0, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">    correct = (torch.argmax(y_pred, dim=<span class=\"number\">1</span>) == y_test).<span class=\"built_in\">type</span>(torch.FloatTensor)</span><br><span class=\"line\">    accuracy_steps[epoch] = correct.mean()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;预测准确率&quot;</span>, accuracy_steps[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 绘制损失函数和精度</span></span><br><span class=\"line\">fig_name = <span class=\"string\">&#x27;网络覆盖与信号强度(语音)&#x27;</span></span><br><span class=\"line\">fontsize = <span class=\"number\">15</span></span><br><span class=\"line\">fig, (ax1, ax2) = plt.subplots(<span class=\"number\">2</span>, figsize=(<span class=\"number\">15</span>, <span class=\"number\">12</span>), sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">ax1.plot(accuracy_steps)</span><br><span class=\"line\">ax1.set_ylabel(<span class=\"string\">&quot;test accuracy&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax1.set_title(fig_name, fontsize=<span class=\"string\">&#x27;xx-large&#x27;</span>)</span><br><span class=\"line\">ax2.plot(loss_steps)</span><br><span class=\"line\">ax2.set_ylabel(<span class=\"string\">&quot;train loss&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax2.set_xlabel(<span class=\"string\">&quot;epochs&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">plt.tight_layout()</span><br><span class=\"line\">plt.savefig(fig_name + <span class=\"string\">&#x27;.png&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y)):</span><br><span class=\"line\">    y[j] = y[j] + <span class=\"number\">1</span></span><br><span class=\"line\">data = pd.DataFrame(y)</span><br><span class=\"line\">data.to_csv(<span class=\"string\">&#x27;BP网络覆盖与信号强度(语音).csv&#x27;</span>, index=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>emmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10…</p>\n<p>算了，就这样，直接交决策树，开摆。</p>\n<p>期待大佬留言评论。</p>\n<p><img src=\"/2023/01/29/MathorCup/%E8%AF%81%E4%B9%A6.png\"></p>\n<p>意料之中，寄。</p>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"},{"title":"Hello World","date":"2023-01-26T16:00:00.000Z","_content":"本次搭建参考https://blog.museday.top/2023/01/26/blog-related/\n本博客仅用于记录成长\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023/01/27\ntags:\n - 博客搭建\ncategories:\n - 教程\n---\n本次搭建参考https://blog.museday.top/2023/01/26/blog-related/\n本博客仅用于记录成长\n","slug":"hello-world","published":1,"updated":"2023-01-27T11:36:14.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b770009ywvf1fnmerzj","content":"<p>本次搭建参考<a href=\"https://blog.museday.top/2023/01/26/blog-related/\">https://blog.museday.top/2023/01/26/blog-related/</a><br>本博客仅用于记录成长</p>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<p>本次搭建参考<a href=\"https://blog.museday.top/2023/01/26/blog-related/\">https://blog.museday.top/2023/01/26/blog-related/</a><br>本博客仅用于记录成长</p>\n"},{"title":"images-test","date":"2023-01-28T02:24:10.000Z","_content":"\n## 测试图片显示\n\n![](touxiang.jpg)\n\n## 测试代码块\n\n```python\nprint('hello world')\n```\n\n```cpp\nint main(argc, **argv)\n{\n    for(i = 0; i < argc; i++)\n    {\n        cout << argv[i];\n    }\n}\n```\n\n","source":"_posts/images-test.md","raw":"---\ntitle: images-test\ndate: 2023-01-28 10:24:10\ntags: \n - 测试\n---\n\n## 测试图片显示\n\n![](touxiang.jpg)\n\n## 测试代码块\n\n```python\nprint('hello world')\n```\n\n```cpp\nint main(argc, **argv)\n{\n    for(i = 0; i < argc; i++)\n    {\n        cout << argv[i];\n    }\n}\n```\n\n","slug":"images-test","published":1,"updated":"2023-01-28T02:53:07.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b78000bywvf3pib83g3","content":"<h2 id=\"测试图片显示\"><a href=\"#测试图片显示\" class=\"headerlink\" title=\"测试图片显示\"></a>测试图片显示</h2><p><img src=\"/2023/01/28/images-test/touxiang.jpg\"></p>\n<h2 id=\"测试代码块\"><a href=\"#测试代码块\" class=\"headerlink\" title=\"测试代码块\"></a>测试代码块</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(argc, **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; argc; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; argv[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"测试图片显示\"><a href=\"#测试图片显示\" class=\"headerlink\" title=\"测试图片显示\"></a>测试图片显示</h2><p><img src=\"/2023/01/28/images-test/touxiang.jpg\"></p>\n<h2 id=\"测试代码块\"><a href=\"#测试代码块\" class=\"headerlink\" title=\"测试代码块\"></a>测试代码块</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(argc, **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; argc; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; argv[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"video-test","date":"2023-01-29T03:33:21.000Z","_content":"\n## 本地视频测试\n\n失败....\n\n## 网络视频测试\n\n<iframe src=\"//player.bilibili.com/player.html?aid=222464199&bvid=BV1C8411K7QY&cid=954007863&page=1&high_quality=1&danmaku=1\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n在url后面加上&high_quality=1&danmaku=1就可以开启最高画质和弹幕\n同时添加参数\n\n```html\nallowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"\n```\n\n**要是有大佬知道怎么在hexo框架下嵌入视频的话，可以在留言板教我，emm，我尝试用原生的html写，没成功**\n","source":"_posts/video-test.md","raw":"---\ntitle: video-test\ndate: 2023-01-29 11:33:21\ntags: \n - 测试\n---\n\n## 本地视频测试\n\n失败....\n\n## 网络视频测试\n\n<iframe src=\"//player.bilibili.com/player.html?aid=222464199&bvid=BV1C8411K7QY&cid=954007863&page=1&high_quality=1&danmaku=1\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n在url后面加上&high_quality=1&danmaku=1就可以开启最高画质和弹幕\n同时添加参数\n\n```html\nallowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"\n```\n\n**要是有大佬知道怎么在hexo框架下嵌入视频的话，可以在留言板教我，emm，我尝试用原生的html写，没成功**\n","slug":"video-test","published":1,"updated":"2023-01-29T04:18:59.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b7e000gywvfamge8c9q","content":"<h2 id=\"本地视频测试\"><a href=\"#本地视频测试\" class=\"headerlink\" title=\"本地视频测试\"></a>本地视频测试</h2><p>失败….</p>\n<h2 id=\"网络视频测试\"><a href=\"#网络视频测试\" class=\"headerlink\" title=\"网络视频测试\"></a>网络视频测试</h2><iframe src=\"//player.bilibili.com/player.html?aid=222464199&bvid=BV1C8411K7QY&cid=954007863&page=1&high_quality=1&danmaku=1\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n<p>在url后面加上&amp;high_quality=1&amp;danmaku=1就可以开启最高画质和弹幕<br>同时添加参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">allowfullscreen=&quot;allowfullscreen&quot; width=&quot;100%&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; sandbox=&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>要是有大佬知道怎么在hexo框架下嵌入视频的话，可以在留言板教我，emm，我尝试用原生的html写，没成功</strong></p>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"本地视频测试\"><a href=\"#本地视频测试\" class=\"headerlink\" title=\"本地视频测试\"></a>本地视频测试</h2><p>失败….</p>\n<h2 id=\"网络视频测试\"><a href=\"#网络视频测试\" class=\"headerlink\" title=\"网络视频测试\"></a>网络视频测试</h2><iframe src=\"//player.bilibili.com/player.html?aid=222464199&bvid=BV1C8411K7QY&cid=954007863&page=1&high_quality=1&danmaku=1\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n<p>在url后面加上&amp;high_quality=1&amp;danmaku=1就可以开启最高画质和弹幕<br>同时添加参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">allowfullscreen=&quot;allowfullscreen&quot; width=&quot;100%&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; sandbox=&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>要是有大佬知道怎么在hexo框架下嵌入视频的话，可以在留言板教我，emm，我尝试用原生的html写，没成功</strong></p>\n"},{"title":"大一上总结","date":"2023-01-26T16:00:00.000Z","_content":"\n## 社科人文\n\n1. 成功当选电院14班学委\n\n2. 加入吉大青创，备战互联网+\n\n3. 微电影大赛三等奖\n\n4. e天志愿者协会科技部成员\n5. 国情理论讲习班成员\n\n## 科学技术\n\n1. 百度 apollo 自动驾驶虚拟仿真赛省二\n2. 加入吉甲大师视觉组和电控组\n3. 吉林大学机器人梦工厂人工智能方向精英队员\n\n","source":"_posts/大一上总结.md","raw":"---\ntitle: 大一上总结\ndate: 2023/01/27\ntags:\n - 总结\n - 项目\n - 竞赛\ncategories:\n - 总结\n---\n\n## 社科人文\n\n1. 成功当选电院14班学委\n\n2. 加入吉大青创，备战互联网+\n\n3. 微电影大赛三等奖\n\n4. e天志愿者协会科技部成员\n5. 国情理论讲习班成员\n\n## 科学技术\n\n1. 百度 apollo 自动驾驶虚拟仿真赛省二\n2. 加入吉甲大师视觉组和电控组\n3. 吉林大学机器人梦工厂人工智能方向精英队员\n\n","slug":"大一上总结","published":1,"updated":"2023-01-27T11:47:49.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b7f000iywvfesfn3rpo","content":"<h2 id=\"社科人文\"><a href=\"#社科人文\" class=\"headerlink\" title=\"社科人文\"></a>社科人文</h2><ol>\n<li><p>成功当选电院14班学委</p>\n</li>\n<li><p>加入吉大青创，备战互联网+</p>\n</li>\n<li><p>微电影大赛三等奖</p>\n</li>\n<li><p>e天志愿者协会科技部成员</p>\n</li>\n<li><p>国情理论讲习班成员</p>\n</li>\n</ol>\n<h2 id=\"科学技术\"><a href=\"#科学技术\" class=\"headerlink\" title=\"科学技术\"></a>科学技术</h2><ol>\n<li>百度 apollo 自动驾驶虚拟仿真赛省二</li>\n<li>加入吉甲大师视觉组和电控组</li>\n<li>吉林大学机器人梦工厂人工智能方向精英队员</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"社科人文\"><a href=\"#社科人文\" class=\"headerlink\" title=\"社科人文\"></a>社科人文</h2><ol>\n<li><p>成功当选电院14班学委</p>\n</li>\n<li><p>加入吉大青创，备战互联网+</p>\n</li>\n<li><p>微电影大赛三等奖</p>\n</li>\n<li><p>e天志愿者协会科技部成员</p>\n</li>\n<li><p>国情理论讲习班成员</p>\n</li>\n</ol>\n<h2 id=\"科学技术\"><a href=\"#科学技术\" class=\"headerlink\" title=\"科学技术\"></a>科学技术</h2><ol>\n<li>百度 apollo 自动驾驶虚拟仿真赛省二</li>\n<li>加入吉甲大师视觉组和电控组</li>\n<li>吉林大学机器人梦工厂人工智能方向精英队员</li>\n</ol>\n"},{"title":"蓝桥杯备赛随笔","date":"2023-02-09T11:27:23.000Z","_content":"\n```c++\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nint p;\nint main()\n{\n    string str;\n    vector<int> n;\n    cin>>str;\n    int i = 0;\n    for(i = 97;i < 123;i++)\n    {\n        char a = i;\n        n.push_back(count(str.begin(),str.end(),a));\n    }\n    auto position = max_element(n.begin(),n.end());\n    for (i = 0; i < 26; i++)\n    {\n        if (n[i] == *position)\n        {\n            p = i;\n            break;\n        }\n    }\n    char max_char = p + 97;\n\n    printf(\"%c\\n\",max_char);\n    printf(\"%d\\n\",*position);\n    return 0;\n}\n```\n\n另一个比我好一点的方法\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  // 请在此输入您的代码\n  int count[26]={0},max=0,i;\n  char ch;\n  while((ch=getchar())!='\\n')\n    count[ch-'a']++;\n  for(i=1;i<26;i++){\n    if(count[i]>count[max])\n      max=i;}\n  printf(\"%c\\n%d\",max+'a',count[max]);\n  return 0;\n}\n```\n\n下面这个题主要是通过加0.5巧妙实现四舍五入\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int i;\n    int n;\n    int n_jige = 0;\n    int n_youxiu = 0;\n    cin>>n;\n    for(i=0;i<n;i++)\n    {\n        int x;\n        cin>>x;\n        if(x>=60)\n        {\n            n_jige++;\n        }\n        if(x>=85)\n        {\n            n_youxiu++;\n        }\n    }\n    int a=(n_jige*100.0)/(n*1.0)+0.5;\n    int b=(n_youxiu*100.0)/(n*1.0)+0.5;\n    printf(\"%d%\\n%d%\\n\",a,b);\n    return 0;\n}\n```\n\n### 最短路径\n\n```c++\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n#define inf 987654321\nstruct edge{ int from, to, dis; };\nstruct node\n{\n    int ind;              // 点的序号\n    int dis;              // 起始点到该点的距离\n    bool operator < (const node rhs) const {\n        return dis > rhs.dis;\n    }\n};\nvector<edge> edges;     // 边集\npriority_queue<node> q; // 小顶堆\nvector<int> lis[100];   // 邻接表\n\nint dis[100]={0};       // 起始点到所有点的最短距离\nint way[100]={0};       // 路径(本题不需要)\n\nvoid add(char from,char to,int dis)\n{\n    edges.push_back({from-'A',to-'A',dis});\n    lis[from-'A'].push_back(edges.size()-1);\n}\nvoid dijkstra()\n{\n    for(int i=0;i<100;i++)\n        dis[i]=inf;\n    dis['A'-'A']=0;\n    q.push({'A'-'A',0});\n    while(!q.empty())\n    {\n        node x = q.top(); q.pop();      // 距离最小的点出队\n        int ind = x.ind;\n        if(x.dis!=dis[ind]) continue;   // 曾经出过队\n        for(int i=0;i<lis[ind].size();i++)\n        {\n            edge &e=edges[lis[ind][i]];   // 引用\n            if(dis[e.to]>dis[ind]+e.dis)\n            {\n                dis[e.to]=dis[ind]+e.dis;\n                way[e.to]=lis[ind][i];\n                q.push({e.to,dis[e.to]});\n            }\n        }\n    }\n}\nint main()\n{\n    add('A', 'B', 2);\n    add('A', 'C', 1);\n    add('A', 'D', 1);\n    add('A', 'E', 1);\n    add('B', 'J', 2);\n    add('B', 'G', 1);\n    add('C', 'D', 3);\n    add('C', 'F', 3);\n    add('C', 'G', 3);\n    add('D', 'E', 1);\n    add('D', 'G', 2);\n    add('D', 'H', 1);\n    add('D', 'I', 2);\n    add('E', 'H', 1);\n    add('E', 'I', 3);\n    add('F', 'G', 1);\n    add('F', 'J', 1);\n    add('G', 'F', 1);\n    add('G', 'I', 3);\n    add('G', 'K', 2);\n    add('H', 'I', 1);\n    add('H', 'L', 2);\n    add('I', 'M', 3);\n    add('J', 'S', 2);\n    add('K', 'N', 1);\n    add('K', 'L', 3);\n    add('K', 'P', 2);\n    add('L', 'M', 1);\n    add('L', 'R', 1);\n    add('M', 'N', 2);\n    add('M', 'Q', 1);\n    add('M', 'S', 1);\n    add('N', 'P', 1);\n    add('O', 'P', 1);\n    add('O', 'Q', 1);\n    add('O', 'R', 3);\n    add('R', 'S', 1);\n    dijkstra();\n    cout<<dis['S'-'A']<<endl;\n    return 0;\n}\n```\n\n### 高精度\n\n```c++\n#include <iostream>\n#include <vector>\nusing namespace std;\n// 模拟基本的加法运算过程\nvector<int> add(vector<int>& A, vector<int>& B)\n{\n\t// 默认A.size()>=B.size()\n\tif (A.size() < B.size()) return add(B, A);\n\tint t = 0;\n\tvector<int> C;\n\tfor (int i = 0; i < A.size(); i++)\n\t{\n\t\tt += A[i];\n\t\tif (i < B.size()) t += B[i];\n\t\tC.push_back(t % 10);\n\t\tt /= 10;\n\t}\n\tif (t) C.push_back(t);\n\treturn C;\n}\n\nint main()\n{\n\tstring a, b;\n\tcin >> a >> b;\n\tvector<int> x, y;\n\t// 这里面102497存的是794201，倒着存方便运算\n\tfor (int i = a.size() - 1; i >= 0; i--)\n\t{\n\t\tx.push_back(a[i] - '0');\n\t}\n\tfor (int i = b.size() - 1; i >= 0; i--)\n\t{\n\t\ty.push_back(b[i] - '0');\n\t}\n\tvector<int> ans = add(x, y);\n\tfor (int i = ans.size() - 1; i >= 0; i--)\n\t{\n\t\tcout << ans[i];\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/蓝桥杯备赛随笔.md","raw":"---\ntitle: 蓝桥杯备赛随笔\ndate: 2023-02-09 19:27:23\ntags: \n  - 竞赛\ncategories:\n  - 教程\n  - 随笔\n---\n\n```c++\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nint p;\nint main()\n{\n    string str;\n    vector<int> n;\n    cin>>str;\n    int i = 0;\n    for(i = 97;i < 123;i++)\n    {\n        char a = i;\n        n.push_back(count(str.begin(),str.end(),a));\n    }\n    auto position = max_element(n.begin(),n.end());\n    for (i = 0; i < 26; i++)\n    {\n        if (n[i] == *position)\n        {\n            p = i;\n            break;\n        }\n    }\n    char max_char = p + 97;\n\n    printf(\"%c\\n\",max_char);\n    printf(\"%d\\n\",*position);\n    return 0;\n}\n```\n\n另一个比我好一点的方法\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n  // 请在此输入您的代码\n  int count[26]={0},max=0,i;\n  char ch;\n  while((ch=getchar())!='\\n')\n    count[ch-'a']++;\n  for(i=1;i<26;i++){\n    if(count[i]>count[max])\n      max=i;}\n  printf(\"%c\\n%d\",max+'a',count[max]);\n  return 0;\n}\n```\n\n下面这个题主要是通过加0.5巧妙实现四舍五入\n\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int i;\n    int n;\n    int n_jige = 0;\n    int n_youxiu = 0;\n    cin>>n;\n    for(i=0;i<n;i++)\n    {\n        int x;\n        cin>>x;\n        if(x>=60)\n        {\n            n_jige++;\n        }\n        if(x>=85)\n        {\n            n_youxiu++;\n        }\n    }\n    int a=(n_jige*100.0)/(n*1.0)+0.5;\n    int b=(n_youxiu*100.0)/(n*1.0)+0.5;\n    printf(\"%d%\\n%d%\\n\",a,b);\n    return 0;\n}\n```\n\n### 最短路径\n\n```c++\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n#define inf 987654321\nstruct edge{ int from, to, dis; };\nstruct node\n{\n    int ind;              // 点的序号\n    int dis;              // 起始点到该点的距离\n    bool operator < (const node rhs) const {\n        return dis > rhs.dis;\n    }\n};\nvector<edge> edges;     // 边集\npriority_queue<node> q; // 小顶堆\nvector<int> lis[100];   // 邻接表\n\nint dis[100]={0};       // 起始点到所有点的最短距离\nint way[100]={0};       // 路径(本题不需要)\n\nvoid add(char from,char to,int dis)\n{\n    edges.push_back({from-'A',to-'A',dis});\n    lis[from-'A'].push_back(edges.size()-1);\n}\nvoid dijkstra()\n{\n    for(int i=0;i<100;i++)\n        dis[i]=inf;\n    dis['A'-'A']=0;\n    q.push({'A'-'A',0});\n    while(!q.empty())\n    {\n        node x = q.top(); q.pop();      // 距离最小的点出队\n        int ind = x.ind;\n        if(x.dis!=dis[ind]) continue;   // 曾经出过队\n        for(int i=0;i<lis[ind].size();i++)\n        {\n            edge &e=edges[lis[ind][i]];   // 引用\n            if(dis[e.to]>dis[ind]+e.dis)\n            {\n                dis[e.to]=dis[ind]+e.dis;\n                way[e.to]=lis[ind][i];\n                q.push({e.to,dis[e.to]});\n            }\n        }\n    }\n}\nint main()\n{\n    add('A', 'B', 2);\n    add('A', 'C', 1);\n    add('A', 'D', 1);\n    add('A', 'E', 1);\n    add('B', 'J', 2);\n    add('B', 'G', 1);\n    add('C', 'D', 3);\n    add('C', 'F', 3);\n    add('C', 'G', 3);\n    add('D', 'E', 1);\n    add('D', 'G', 2);\n    add('D', 'H', 1);\n    add('D', 'I', 2);\n    add('E', 'H', 1);\n    add('E', 'I', 3);\n    add('F', 'G', 1);\n    add('F', 'J', 1);\n    add('G', 'F', 1);\n    add('G', 'I', 3);\n    add('G', 'K', 2);\n    add('H', 'I', 1);\n    add('H', 'L', 2);\n    add('I', 'M', 3);\n    add('J', 'S', 2);\n    add('K', 'N', 1);\n    add('K', 'L', 3);\n    add('K', 'P', 2);\n    add('L', 'M', 1);\n    add('L', 'R', 1);\n    add('M', 'N', 2);\n    add('M', 'Q', 1);\n    add('M', 'S', 1);\n    add('N', 'P', 1);\n    add('O', 'P', 1);\n    add('O', 'Q', 1);\n    add('O', 'R', 3);\n    add('R', 'S', 1);\n    dijkstra();\n    cout<<dis['S'-'A']<<endl;\n    return 0;\n}\n```\n\n### 高精度\n\n```c++\n#include <iostream>\n#include <vector>\nusing namespace std;\n// 模拟基本的加法运算过程\nvector<int> add(vector<int>& A, vector<int>& B)\n{\n\t// 默认A.size()>=B.size()\n\tif (A.size() < B.size()) return add(B, A);\n\tint t = 0;\n\tvector<int> C;\n\tfor (int i = 0; i < A.size(); i++)\n\t{\n\t\tt += A[i];\n\t\tif (i < B.size()) t += B[i];\n\t\tC.push_back(t % 10);\n\t\tt /= 10;\n\t}\n\tif (t) C.push_back(t);\n\treturn C;\n}\n\nint main()\n{\n\tstring a, b;\n\tcin >> a >> b;\n\tvector<int> x, y;\n\t// 这里面102497存的是794201，倒着存方便运算\n\tfor (int i = a.size() - 1; i >= 0; i--)\n\t{\n\t\tx.push_back(a[i] - '0');\n\t}\n\tfor (int i = b.size() - 1; i >= 0; i--)\n\t{\n\t\ty.push_back(b[i] - '0');\n\t}\n\tvector<int> ans = add(x, y);\n\tfor (int i = ans.size() - 1; i >= 0; i--)\n\t{\n\t\tcout << ans[i];\n\t}\n\treturn 0;\n}\n```\n\n","slug":"蓝桥杯备赛随笔","published":1,"updated":"2023-02-15T12:34:02.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleus4b7h000lywvfg60rcxti","content":"<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; n;</span><br><span class=\"line\">    cin&gt;&gt;str;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">97</span>;i &lt; <span class=\"number\">123</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> a = i;</span><br><span class=\"line\">        n.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">count</span>(str.<span class=\"built_in\">begin</span>(),str.<span class=\"built_in\">end</span>(),a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> position = <span class=\"built_in\">max_element</span>(n.<span class=\"built_in\">begin</span>(),n.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n[i] == *position)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">char</span> max_char = p + <span class=\"number\">97</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c\\n&quot;</span>,max_char);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*position);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个比我好一点的方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请在此输入您的代码</span></span><br><span class=\"line\">  <span class=\"type\">int</span> count[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;,max=<span class=\"number\">0</span>,i;</span><br><span class=\"line\">  <span class=\"type\">char</span> ch;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>((ch=<span class=\"built_in\">getchar</span>())!=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    count[ch-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count[i]&gt;count[max])</span><br><span class=\"line\">      max=i;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c\\n%d&quot;</span>,max+<span class=\"string\">&#x27;a&#x27;</span>,count[max]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个题主要是通过加0.5巧妙实现四舍五入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> n_jige = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n_youxiu = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">60</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n_jige++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">85</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n_youxiu++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> a=(n_jige*<span class=\"number\">100.0</span>)/(n*<span class=\"number\">1.0</span>)+<span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b=(n_youxiu*<span class=\"number\">100.0</span>)/(n*<span class=\"number\">1.0</span>)+<span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%\\n%d%\\n&quot;</span>,a,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inf 987654321</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123; <span class=\"type\">int</span> from, to, dis; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ind;              <span class=\"comment\">// 点的序号</span></span><br><span class=\"line\">    <span class=\"type\">int</span> dis;              <span class=\"comment\">// 起始点到该点的距离</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> node rhs) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dis &gt; rhs.dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;edge&gt; edges;     <span class=\"comment\">// 边集</span></span><br><span class=\"line\">priority_queue&lt;node&gt; q; <span class=\"comment\">// 小顶堆</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; lis[<span class=\"number\">100</span>];   <span class=\"comment\">// 邻接表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dis[<span class=\"number\">100</span>]=&#123;<span class=\"number\">0</span>&#125;;       <span class=\"comment\">// 起始点到所有点的最短距离</span></span><br><span class=\"line\"><span class=\"type\">int</span> way[<span class=\"number\">100</span>]=&#123;<span class=\"number\">0</span>&#125;;       <span class=\"comment\">// 路径(本题不需要)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">char</span> from,<span class=\"type\">char</span> to,<span class=\"type\">int</span> dis)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edges.<span class=\"built_in\">push_back</span>(&#123;from-<span class=\"string\">&#x27;A&#x27;</span>,to-<span class=\"string\">&#x27;A&#x27;</span>,dis&#125;);</span><br><span class=\"line\">    lis[from-<span class=\"string\">&#x27;A&#x27;</span>].<span class=\"built_in\">push_back</span>(edges.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)</span><br><span class=\"line\">        dis[i]=inf;</span><br><span class=\"line\">    dis[<span class=\"string\">&#x27;A&#x27;</span>-<span class=\"string\">&#x27;A&#x27;</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"string\">&#x27;A&#x27;</span>-<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        node x = q.<span class=\"built_in\">top</span>(); q.<span class=\"built_in\">pop</span>();      <span class=\"comment\">// 距离最小的点出队</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ind = x.ind;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.dis!=dis[ind]) <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 曾经出过队</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;lis[ind].<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            edge &amp;e=edges[lis[ind][i]];   <span class=\"comment\">// 引用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[e.to]&gt;dis[ind]+e.dis)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dis[e.to]=dis[ind]+e.dis;</span><br><span class=\"line\">                way[e.to]=lis[ind][i];</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;e.to,dis[e.to]&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;N&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;R&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">    cout&lt;&lt;dis[<span class=\"string\">&#x27;S&#x27;</span>-<span class=\"string\">&#x27;A&#x27;</span>]&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">// 模拟基本的加法运算过程</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">add</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; A, vector&lt;<span class=\"type\">int</span>&gt;&amp; B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 默认A.size()&gt;=B.size()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (A.<span class=\"built_in\">size</span>() &lt; B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">add</span>(B, A);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt += A[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; B.<span class=\"built_in\">size</span>()) t += B[i];</span><br><span class=\"line\">\t\tC.<span class=\"built_in\">push_back</span>(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tt /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (t) C.<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstring a, b;</span><br><span class=\"line\">\tcin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; x, y;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里面102497存的是794201，倒着存方便运算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx.<span class=\"built_in\">push_back</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ty.<span class=\"built_in\">push_back</span>(b[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; ans = <span class=\"built_in\">add</span>(x, y);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = ans.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; ans[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; n;</span><br><span class=\"line\">    cin&gt;&gt;str;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">97</span>;i &lt; <span class=\"number\">123</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> a = i;</span><br><span class=\"line\">        n.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">count</span>(str.<span class=\"built_in\">begin</span>(),str.<span class=\"built_in\">end</span>(),a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> position = <span class=\"built_in\">max_element</span>(n.<span class=\"built_in\">begin</span>(),n.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n[i] == *position)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">char</span> max_char = p + <span class=\"number\">97</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c\\n&quot;</span>,max_char);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,*position);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个比我好一点的方法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请在此输入您的代码</span></span><br><span class=\"line\">  <span class=\"type\">int</span> count[<span class=\"number\">26</span>]=&#123;<span class=\"number\">0</span>&#125;,max=<span class=\"number\">0</span>,i;</span><br><span class=\"line\">  <span class=\"type\">char</span> ch;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>((ch=<span class=\"built_in\">getchar</span>())!=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    count[ch-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count[i]&gt;count[max])</span><br><span class=\"line\">      max=i;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c\\n%d&quot;</span>,max+<span class=\"string\">&#x27;a&#x27;</span>,count[max]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个题主要是通过加0.5巧妙实现四舍五入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> n_jige = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n_youxiu = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">60</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n_jige++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">85</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n_youxiu++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> a=(n_jige*<span class=\"number\">100.0</span>)/(n*<span class=\"number\">1.0</span>)+<span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b=(n_youxiu*<span class=\"number\">100.0</span>)/(n*<span class=\"number\">1.0</span>)+<span class=\"number\">0.5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%\\n%d%\\n&quot;</span>,a,b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inf 987654321</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span>&#123; <span class=\"type\">int</span> from, to, dis; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ind;              <span class=\"comment\">// 点的序号</span></span><br><span class=\"line\">    <span class=\"type\">int</span> dis;              <span class=\"comment\">// 起始点到该点的距离</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> node rhs) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dis &gt; rhs.dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;edge&gt; edges;     <span class=\"comment\">// 边集</span></span><br><span class=\"line\">priority_queue&lt;node&gt; q; <span class=\"comment\">// 小顶堆</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; lis[<span class=\"number\">100</span>];   <span class=\"comment\">// 邻接表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dis[<span class=\"number\">100</span>]=&#123;<span class=\"number\">0</span>&#125;;       <span class=\"comment\">// 起始点到所有点的最短距离</span></span><br><span class=\"line\"><span class=\"type\">int</span> way[<span class=\"number\">100</span>]=&#123;<span class=\"number\">0</span>&#125;;       <span class=\"comment\">// 路径(本题不需要)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">char</span> from,<span class=\"type\">char</span> to,<span class=\"type\">int</span> dis)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edges.<span class=\"built_in\">push_back</span>(&#123;from-<span class=\"string\">&#x27;A&#x27;</span>,to-<span class=\"string\">&#x27;A&#x27;</span>,dis&#125;);</span><br><span class=\"line\">    lis[from-<span class=\"string\">&#x27;A&#x27;</span>].<span class=\"built_in\">push_back</span>(edges.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)</span><br><span class=\"line\">        dis[i]=inf;</span><br><span class=\"line\">    dis[<span class=\"string\">&#x27;A&#x27;</span>-<span class=\"string\">&#x27;A&#x27;</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"string\">&#x27;A&#x27;</span>-<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        node x = q.<span class=\"built_in\">top</span>(); q.<span class=\"built_in\">pop</span>();      <span class=\"comment\">// 距离最小的点出队</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ind = x.ind;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x.dis!=dis[ind]) <span class=\"keyword\">continue</span>;   <span class=\"comment\">// 曾经出过队</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;lis[ind].<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            edge &amp;e=edges[lis[ind][i]];   <span class=\"comment\">// 引用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[e.to]&gt;dis[ind]+e.dis)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dis[e.to]=dis[ind]+e.dis;</span><br><span class=\"line\">                way[e.to]=lis[ind][i];</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;e.to,dis[e.to]&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;G&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;N&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(<span class=\"string\">&#x27;R&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">    cout&lt;&lt;dis[<span class=\"string\">&#x27;S&#x27;</span>-<span class=\"string\">&#x27;A&#x27;</span>]&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度\"><a href=\"#高精度\" class=\"headerlink\" title=\"高精度\"></a>高精度</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">// 模拟基本的加法运算过程</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">add</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; A, vector&lt;<span class=\"type\">int</span>&gt;&amp; B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 默认A.size()&gt;=B.size()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (A.<span class=\"built_in\">size</span>() &lt; B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">add</span>(B, A);</span><br><span class=\"line\">\t<span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt += A[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; B.<span class=\"built_in\">size</span>()) t += B[i];</span><br><span class=\"line\">\t\tC.<span class=\"built_in\">push_back</span>(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tt /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (t) C.<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstring a, b;</span><br><span class=\"line\">\tcin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; x, y;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里面102497存的是794201，倒着存方便运算</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tx.<span class=\"built_in\">push_back</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ty.<span class=\"built_in\">push_back</span>(b[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; ans = <span class=\"built_in\">add</span>(x, y);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = ans.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; ans[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/MathorCup/importance1.jpg","post":"cleus4b750007ywvfg7180l77","slug":"importance1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MathorCup/importance2.jpg","post":"cleus4b750007ywvfg7180l77","slug":"importance2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MathorCup/证书.png","post":"cleus4b750007ywvfg7180l77","slug":"证书.png","modified":1,"renderable":1},{"_id":"source/_posts/images-test/touxiang.jpg","post":"cleus4b78000bywvf3pib83g3","slug":"touxiang.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cleus4b770009ywvf1fnmerzj","category_id":"cleus4b6z0004ywvfgitqfw8u","_id":"cleus4b7g000jywvf5qkw13zu"},{"post_id":"cleus4b6p0001ywvf96r4b720","category_id":"cleus4b6z0004ywvfgitqfw8u","_id":"cleus4b7i000mywvf404x4p3k"},{"post_id":"cleus4b750007ywvfg7180l77","category_id":"cleus4b6z0004ywvfgitqfw8u","_id":"cleus4b7i000oywvf6j4s1i2y"},{"post_id":"cleus4b7f000iywvfesfn3rpo","category_id":"cleus4b7i000nywvf3359h8xq","_id":"cleus4b7k000wywvf5u6qa252"},{"post_id":"cleus4b7h000lywvfg60rcxti","category_id":"cleus4b6z0004ywvfgitqfw8u","_id":"cleus4b7l000zywvfgrmp1tz0"},{"post_id":"cleus4b7h000lywvfg60rcxti","category_id":"cleus4b7j000sywvffi1x5rmr","_id":"cleus4b7l0011ywvf8p9hgr59"}],"PostTag":[{"post_id":"cleus4b6p0001ywvf96r4b720","tag_id":"cleus4b720005ywvf0n3lbmyt","_id":"cleus4b7d000eywvfg3xt7ke5"},{"post_id":"cleus4b7h000lywvfg60rcxti","tag_id":"cleus4b720005ywvf0n3lbmyt","_id":"cleus4b7j000qywvf0mzeenf8"},{"post_id":"cleus4b6v0003ywvfgr04clt3","tag_id":"cleus4b79000dywvf5w881w2r","_id":"cleus4b7j000rywvf3iqsgffr"},{"post_id":"cleus4b6v0003ywvfgr04clt3","tag_id":"cleus4b7g000kywvfbk02dz9f","_id":"cleus4b7k000uywvf7ianacuc"},{"post_id":"cleus4b750007ywvfg7180l77","tag_id":"cleus4b720005ywvf0n3lbmyt","_id":"cleus4b7k000vywvf7g421wvg"},{"post_id":"cleus4b770009ywvf1fnmerzj","tag_id":"cleus4b7k000tywvfenjv9rnn","_id":"cleus4b7k000yywvfd4ht06mg"},{"post_id":"cleus4b78000bywvf3pib83g3","tag_id":"cleus4b7k000xywvf3dtd5k0a","_id":"cleus4b7l0012ywvfc4b29h7q"},{"post_id":"cleus4b7e000gywvfamge8c9q","tag_id":"cleus4b7k000xywvf3dtd5k0a","_id":"cleus4b7m0014ywvfgffh535l"},{"post_id":"cleus4b7f000iywvfesfn3rpo","tag_id":"cleus4b7m0013ywvf2a5bgw35","_id":"cleus4b7n0016ywvf9q0icm7j"},{"post_id":"cleus4b7f000iywvfesfn3rpo","tag_id":"cleus4b7m0015ywvfdn429mb1","_id":"cleus4b7n0017ywvf2jyh552n"},{"post_id":"cleus4b7f000iywvfesfn3rpo","tag_id":"cleus4b720005ywvf0n3lbmyt","_id":"cleus4b7n0018ywvfbeob9vev"}],"Tag":[{"name":"竞赛","_id":"cleus4b720005ywvf0n3lbmyt"},{"name":"教程","_id":"cleus4b79000dywvf5w881w2r"},{"name":"学习笔记","_id":"cleus4b7g000kywvfbk02dz9f"},{"name":"博客搭建","_id":"cleus4b7k000tywvfenjv9rnn"},{"name":"测试","_id":"cleus4b7k000xywvf3dtd5k0a"},{"name":"总结","_id":"cleus4b7m0013ywvf2a5bgw35"},{"name":"项目","_id":"cleus4b7m0015ywvfdn429mb1"}]}}