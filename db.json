{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/index_img.jpg","path":"img/index_img.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tit.jpg","path":"img/tit.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"821fe7541c063f939f4985c696ea0254337eb078","modified":1674886543152},{"_id":"source/_posts/images-test.md","hash":"0415caaef1de5a0aac8a127a1c9fa9fa8d7d6049","modified":1674874387984},{"_id":"source/_posts/hello-world.md","hash":"688f2aad3950c9e8a3f66543059ae33a00736925","modified":1674819374478},{"_id":"source/categories/index.md","hash":"7ba6994ae334773e4a5e622796246ad877da3e35","modified":1674819510584},{"_id":"source/messageboard/index.md","hash":"11505f61ce0dd8cbf5b41bd38d044b533bf8dbc7","modified":1674826391516},{"_id":"source/_posts/大一上总结.md","hash":"440ee0d3fc5ed174c8a23494d0a7c55b3162f045","modified":1674820069892},{"_id":"source/about/index.md","hash":"5fd63db786bd1b167ff6c2f495064f00bf582899","modified":1674805718101},{"_id":"source/link/index.md","hash":"e2b25071bbef2552dcdbb263ea19c2e61f14dd3e","modified":1674824408132},{"_id":"source/myself/index.md","hash":"41173fe39c50a5c03f6710404730339e0591d31c","modified":1674805798607},{"_id":"source/timeline/index.md","hash":"1cb917b9d4beaf729111cf9280a678057a2d38e4","modified":1674805668003},{"_id":"source/tags/index.md","hash":"c5c5bb3fdc442e17c7cd738f694851b2c099fbd7","modified":1674819486791},{"_id":"source/_posts/images-test/touxiang.jpg","hash":"3b8044a57a9aa99d56c1f3b151d35a4e25470823","modified":1674806277644},{"_id":"themes/butterfly/package.json","hash":"822d83111feefd6a026b14fedef7871960ab434f","modified":1674799942310},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1674799942260},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1674799942261},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1674799942262},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1674799942260},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1674799942266},{"_id":"themes/butterfly/_config.yml","hash":"1c6cecfaf97b3bcbb8a23da9ebafdcb45af08e8a","modified":1674825049462},{"_id":"themes/butterfly/plugins.yml","hash":"8e3b5e44ff0e7e9c5779234bf21e1e70aeec5ae8","modified":1674799942310},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1674799942266},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1674799942263},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1674799942263},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1674799942265},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1674799942308},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1674799942308},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1674799942310},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1674799942268},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1674799942269},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1674799942309},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"bfc28cb79e81f55c09672fb8e4372a71e0994761","modified":1674799942269},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1674799942279},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1674799942270},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"25cd2d7c4d3f6836a157b73a2442a7712ff40b34","modified":1674799942275},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1674799942280},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1674799942312},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1674799942311},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1674799942312},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1674799942312},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1674799942313},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1674799942313},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"5f96a28a4eac046b68ccc10e8c24ab01525e3245","modified":1674799942280},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1674799942312},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1674799942314},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1674799942315},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1674799942314},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"40f85785d041b976f47a2828b0dc54346dcb62b0","modified":1674799942316},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1674799942316},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1674799942317},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ade8ce15cc7f41587e616f8e40f565081aee1c37","modified":1674799942317},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1674799942318},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"bc74b7701ac07ff679b699d63e706935b37a8b7b","modified":1674799942318},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1674799942318},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1674799942319},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1674799942319},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1674799942319},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1674799942321},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1674799942320},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1674799942320},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1674799942321},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1674799942342},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1674799942343},{"_id":"themes/butterfly/source/js/main.js","hash":"f049b166073c4bcdccc6d8348774941a4e2c6d7b","modified":1674799942344},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1674799942343},{"_id":"themes/butterfly/source/css/var.styl","hash":"63f12a6a847738b1479ce782c8caac5e0cf16a6b","modified":1674799942342},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1674799942344},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1674799942345},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1674799942270},{"_id":"themes/butterfly/source/js/utils.js","hash":"85a4f6e680ad2500ed114918158557ed85a8d89a","modified":1674799942347},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1674799942271},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1674799942272},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1674799942271},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1674799942272},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1674799942273},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1674799942271},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1674799942272},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1674799942273},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1674799942274},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"40efa8e29460746b0d1253ce19b87eb035e25c47","modified":1674799942274},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1674799942273},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1674799942276},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1674799942275},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1674799942276},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1674799942275},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1674799942277},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1674799942274},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1674799942278},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1674799942277},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1674799942277},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1674799942279},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1674799942278},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1674799942278},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1674799942279},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1674799942281},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1674799942300},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1674799942299},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1674799942305},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1674799942293},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1674799942299},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1674799942304},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1674799942304},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1674799942305},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1674799942305},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1674799942307},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1674799942307},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1674799942306},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1674799942308},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1674799942307},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1674799942308},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1674799942323},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c424b1a3119ffb8396d80bb3585f48bd6777c917","modified":1674799942323},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1674799942326},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1674799942324},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1674799942327},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7a12719a1ef2bce7d4056f2241251a71e92cd72c","modified":1674799942327},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1674799942327},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d33f2d9001a82d9a72d6f4088743762fbd016e4c","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1674799942329},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1674799942328},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1674799942329},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1674799942330},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1674799942329},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1674799942332},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1674799942333},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1674799942335},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1674799942330},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1674799942334},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1674799942333},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1674799942334},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1674799942335},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1674799942336},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1674799942336},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1674799942337},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1674799942336},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"e3e1b234a2595824576b8c9ed87af6d933f4e125","modified":1674799942337},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"72a38c1dad7f55564b02c7a23e6ef39219edcd80","modified":1674799942337},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1674799942339},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1674799942338},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1674799942340},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1674799942340},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1674799942339},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1674799942340},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"af08cc5603c768903747dbce43358329bc0b76dd","modified":1674807182605},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1674799942340},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1674799942341},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1674799942345},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1674799942282},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1674799942283},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1674799942341},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1674799942283},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1674799942282},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1674799942284},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1674799942285},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"44b6d3fb2c9b437d85de751d83e2e92a0830451d","modified":1674799942345},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1674799942284},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1674799942283},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1674799942286},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1674799942286},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1674799942285},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1674799942285},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1674799942288},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1674799942286},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1674799942287},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1674799942287},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1674799942289},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1674799942290},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1674799942290},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1674799942289},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1674799942291},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1674799942291},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1674799942291},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1674799942292},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1674799942293},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1674799942293},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1674799942296},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1674799942295},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1674799942296},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1674799942296},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1674799942294},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1674799942297},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1674799942294},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1674799942298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1674799942297},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1674799942298},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1674799942301},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1674799942302},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1674799942302},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1674799942294},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1674799942295},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1674799942303},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1674799942302},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1674799942303},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1674799942303},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1674799942325},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1674799942324},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1674799942325},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1674799942326},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1674799942326},{"_id":"themes/butterfly/source/img/tit.jpg","hash":"3b8044a57a9aa99d56c1f3b151d35a4e25470823","modified":1674806277644},{"_id":"themes/butterfly/source/img/index_img.jpg","hash":"31931e87b043397571cd95284956236863361133","modified":1674806758405},{"_id":"source/_posts/MathorCup/importance1.jpg","hash":"da09ce819c242daf963437918f385e8bd5e69404","modified":1674960860143},{"_id":"source/_posts/MathorCup.md","hash":"cc3752c8214be31021d186506af217c055451d57","modified":1674961428262},{"_id":"source/_posts/MathorCup/importance2.jpg","hash":"1dada7719900bd9335c9652302d063833ddb4787","modified":1674960910888}],"Category":[{"name":"教程","_id":"cldfk5i0s0004h4vf9sj68qak"},{"name":"总结","_id":"cldfk5i16000gh4vfga3df1m1"}],"Data":[{"_id":"link","data":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}],"Page":[{"title":"关于","date":"2021-02-18T05:58:07.000Z","type":"about","comments":0,"_content":"\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-02-18 13:58:07\ntype: about \ncomments: false\n---\n\n","updated":"2023-01-27T07:48:38.101Z","path":"about/index.html","layout":"page","_id":"cldfk5i0j0000h4vffwv742ti","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"categories","date":"2023-01-27T11:02:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-01-27 19:02:45\ntype: \"categories\"\n---\n","updated":"2023-01-27T11:38:30.584Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cldfk5i0q0002h4vffu73bggg","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"留言板","date":"2021-02-18T05:53:33.000Z","type":"messageboard","_content":" \n# 留言板：\n## <div align=\"center\"> 有什么想说的？ </font>\n## <div align=\"center\"> 有什么想问的？ </font>\n## <div align=\"center\"> 有什么想吐槽的？ </font>\n## <div align=\"center\"> 可以在下面留言... </font>\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","source":"messageboard/index.md","raw":"\n---\ntitle: 留言板\ndate: 2021-02-18 13:53:33  \ntype: messageboard\n--- \n# 留言板：\n## <div align=\"center\"> 有什么想说的？ </font>\n## <div align=\"center\"> 有什么想问的？ </font>\n## <div align=\"center\"> 有什么想吐槽的？ </font>\n## <div align=\"center\"> 可以在下面留言... </font>\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","updated":"2023-01-27T13:33:11.516Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"cldfk5i0t0006h4vf94ggfz77","content":"<h1 id=\"留言板：\"><a href=\"#留言板：\" class=\"headerlink\" title=\"留言板：\"></a>留言板：</h1><h2 id=\"有什么想说的？\"><a href=\"#有什么想说的？\" class=\"headerlink\" title=\" 有什么想说的？ \"></a><div align=\"center\"> 有什么想说的？ </font></h2><h2 id=\"有什么想问的？\"><a href=\"#有什么想问的？\" class=\"headerlink\" title=\" 有什么想问的？ \"></a><div align=\"center\"> 有什么想问的？ </font></h2><h2 id=\"有什么想吐槽的？\"><a href=\"#有什么想吐槽的？\" class=\"headerlink\" title=\" 有什么想吐槽的？ \"></a><div align=\"center\"> 有什么想吐槽的？ </font></h2><h2 id=\"可以在下面留言…\"><a href=\"#可以在下面留言…\" class=\"headerlink\" title=\" 可以在下面留言… \"></a><div align=\"center\"> 可以在下面留言… </font></h2><script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"留言板：\"><a href=\"#留言板：\" class=\"headerlink\" title=\"留言板：\"></a>留言板：</h1><h2 id=\"有什么想说的？\"><a href=\"#有什么想说的？\" class=\"headerlink\" title=\" 有什么想说的？ \"></a><div align=\"center\"> 有什么想说的？ </font></h2><h2 id=\"有什么想问的？\"><a href=\"#有什么想问的？\" class=\"headerlink\" title=\" 有什么想问的？ \"></a><div align=\"center\"> 有什么想问的？ </font></h2><h2 id=\"有什么想吐槽的？\"><a href=\"#有什么想吐槽的？\" class=\"headerlink\" title=\" 有什么想吐槽的？ \"></a><div align=\"center\"> 有什么想吐槽的？ </font></h2><h2 id=\"可以在下面留言…\"><a href=\"#可以在下面留言…\" class=\"headerlink\" title=\" 可以在下面留言… \"></a><div align=\"center\"> 可以在下面留言… </font></h2><script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/pinglun\"\n        data-repo-id=\"R_kgDOI2g0Vg\"\n        data-category-id=\"DIC_kwDOI2g0Vs4CT1iO\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n"},{"title":"This is me","date":"2021-02-18T05:59:09.000Z","type":"myself","comments":0,"aside":false,"_content":"\n","source":"myself/index.md","raw":"---\ntitle: This is me\ndate: 2021-02-18 13:59:09\ntype: myself \ncomments: false\naside: false \n---\n\n","updated":"2023-01-27T07:49:58.607Z","path":"myself/index.html","layout":"page","_id":"cldfk5i0u0007h4vf0h86g3bk","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"link","date":"2023-01-27T07:42:53.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-01-27 15:42:53\ntype: \"link\"\n---\n","updated":"2023-01-27T13:00:08.132Z","path":"link/index.html","comments":1,"layout":"page","_id":"cldfk5i0u0008h4vf2tpb35jq","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"Update","date":"2021-02-18T05:56:57.000Z","type":"timeline","comments":0,"_content":"","source":"timeline/index.md","raw":"---\ntitle: Update\ndate: 2021-02-18 13:56:57\ntype: timeline\ncomments: false \n---\n","updated":"2023-01-27T07:47:48.003Z","path":"timeline/index.html","layout":"page","_id":"cldfk5i0v000bh4vfagznbx9f","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"tags","date":"2023-01-27T11:02:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-01-27 19:02:29\ntype: \"tags\"\n---\n","updated":"2023-01-27T11:38:06.791Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cldfk5i0w000ch4vfgn0j6h5n","content":"","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2023-01-26T16:00:00.000Z","_content":"本次搭建参考https://blog.museday.top/2023/01/26/blog-related/\n本博客仅用于记录成长\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023/01/27\ntags:\n - 博客搭建\ncategories:\n - 教程\n---\n本次搭建参考https://blog.museday.top/2023/01/26/blog-related/\n本博客仅用于记录成长\n","slug":"hello-world","published":1,"updated":"2023-01-27T11:36:14.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfk5i0m0001h4vf07u6ajix","content":"<p>本次搭建参考<a href=\"https://blog.museday.top/2023/01/26/blog-related/\">https://blog.museday.top/2023/01/26/blog-related/</a><br>本博客仅用于记录成长</p>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<p>本次搭建参考<a href=\"https://blog.museday.top/2023/01/26/blog-related/\">https://blog.museday.top/2023/01/26/blog-related/</a><br>本博客仅用于记录成长</p>\n"},{"title":"images-test","date":"2023-01-28T02:24:10.000Z","_content":"\n## 测试图片显示\n\n![](touxiang.jpg)\n\n## 测试代码块\n\n```python\nprint('hello world')\n```\n\n```cpp\nint main(argc, **argv)\n{\n    for(i = 0; i < argc; i++)\n    {\n        cout << argv[i];\n    }\n}\n```\n\n","source":"_posts/images-test.md","raw":"---\ntitle: images-test\ndate: 2023-01-28 10:24:10\ntags: \n - 测试\n---\n\n## 测试图片显示\n\n![](touxiang.jpg)\n\n## 测试代码块\n\n```python\nprint('hello world')\n```\n\n```cpp\nint main(argc, **argv)\n{\n    for(i = 0; i < argc; i++)\n    {\n        cout << argv[i];\n    }\n}\n```\n\n","slug":"images-test","published":1,"updated":"2023-01-28T02:53:07.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfk5i0q0003h4vf818ydku6","content":"<h2 id=\"测试图片显示\"><a href=\"#测试图片显示\" class=\"headerlink\" title=\"测试图片显示\"></a>测试图片显示</h2><p><img src=\"/2023/01/28/images-test/touxiang.jpg\"></p>\n<h2 id=\"测试代码块\"><a href=\"#测试代码块\" class=\"headerlink\" title=\"测试代码块\"></a>测试代码块</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(argc, **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; argc; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; argv[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"测试图片显示\"><a href=\"#测试图片显示\" class=\"headerlink\" title=\"测试图片显示\"></a>测试图片显示</h2><p><img src=\"/2023/01/28/images-test/touxiang.jpg\"></p>\n<h2 id=\"测试代码块\"><a href=\"#测试代码块\" class=\"headerlink\" title=\"测试代码块\"></a>测试代码块</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(argc, **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; argc; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; argv[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"大一上总结","date":"2023-01-26T16:00:00.000Z","_content":"\n## 社科人文\n\n1. 成功当选电院14班学委\n\n2. 加入吉大青创，备战互联网+\n\n3. 微电影大赛三等奖\n\n4. e天志愿者协会科技部成员\n5. 国情理论讲习班成员\n\n## 科学技术\n\n1. 百度 apollo 自动驾驶虚拟仿真赛省二\n2. 加入吉甲大师视觉组和电控组\n3. 吉林大学机器人梦工厂人工智能方向精英队员\n\n","source":"_posts/大一上总结.md","raw":"---\ntitle: 大一上总结\ndate: 2023/01/27\ntags:\n - 总结\n - 项目\n - 竞赛\ncategories:\n - 总结\n---\n\n## 社科人文\n\n1. 成功当选电院14班学委\n\n2. 加入吉大青创，备战互联网+\n\n3. 微电影大赛三等奖\n\n4. e天志愿者协会科技部成员\n5. 国情理论讲习班成员\n\n## 科学技术\n\n1. 百度 apollo 自动驾驶虚拟仿真赛省二\n2. 加入吉甲大师视觉组和电控组\n3. 吉林大学机器人梦工厂人工智能方向精英队员\n\n","slug":"大一上总结","published":1,"updated":"2023-01-27T11:47:49.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldfk5i14000fh4vf7c2o49cn","content":"<h2 id=\"社科人文\"><a href=\"#社科人文\" class=\"headerlink\" title=\"社科人文\"></a>社科人文</h2><ol>\n<li><p>成功当选电院14班学委</p>\n</li>\n<li><p>加入吉大青创，备战互联网+</p>\n</li>\n<li><p>微电影大赛三等奖</p>\n</li>\n<li><p>e天志愿者协会科技部成员</p>\n</li>\n<li><p>国情理论讲习班成员</p>\n</li>\n</ol>\n<h2 id=\"科学技术\"><a href=\"#科学技术\" class=\"headerlink\" title=\"科学技术\"></a>科学技术</h2><ol>\n<li>百度 apollo 自动驾驶虚拟仿真赛省二</li>\n<li>加入吉甲大师视觉组和电控组</li>\n<li>吉林大学机器人梦工厂人工智能方向精英队员</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"Hexo","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"博客为我搭建提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"社科人文\"><a href=\"#社科人文\" class=\"headerlink\" title=\"社科人文\"></a>社科人文</h2><ol>\n<li><p>成功当选电院14班学委</p>\n</li>\n<li><p>加入吉大青创，备战互联网+</p>\n</li>\n<li><p>微电影大赛三等奖</p>\n</li>\n<li><p>e天志愿者协会科技部成员</p>\n</li>\n<li><p>国情理论讲习班成员</p>\n</li>\n</ol>\n<h2 id=\"科学技术\"><a href=\"#科学技术\" class=\"headerlink\" title=\"科学技术\"></a>科学技术</h2><ol>\n<li>百度 apollo 自动驾驶虚拟仿真赛省二</li>\n<li>加入吉甲大师视觉组和电控组</li>\n<li>吉林大学机器人梦工厂人工智能方向精英队员</li>\n</ol>\n"},{"title":"第三届MathorCup","date":"2023-01-29T02:42:55.000Z","_content":"\n## 决策树\n\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom itertools import combinations\n\nif __name__ == \"__main__\":\n    mpl.rcParams['font.sans-serif'] = ['SimHei']\n    mpl.rcParams['axes.unicode_minus'] = False\n\n    feature = '网络覆盖与信号强度','语音通话清晰度','语音通话稳定性','是否遇到过网络问题','居民小区','办公室','高校','商业街','地铁','农村','高铁','其他，请注明','手机没有信号','有信号无法拨通','通话过程中突然中断','通话中有杂音、听不清、断断续续','串线','通话过程中一方听不见','其他，请注明.1','脱网次数','mos质差次数','未接通掉话次数','重定向次数','重定向驻留时长','ARPU（家庭宽带）','是否4G网络客户（本地剔除物联网）','当月ARPU','前3月ARPU','当月欠费金额','前第3个月欠费金额'\n    path = 'f1_.csv'  # 数据文件路径\n    data = pd.read_csv(path, header=None)\n    x_prime = data[list(range(1,31))]\n    y = pd.Categorical(data[0]).codes\n    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n    pairs = [c for c in combinations(range(1,31), 30)]\n    feature_pairs = []\n    num = len(pairs)\n    for i in range(num):\n        feature_pairs.append(list(pairs[i]))\n\n    for i, pair in enumerate(feature_pairs):\n        # 准备数据\n        x_train = x_prime_train[pair]\n        x_test = x_prime_test[pair]\n\n        # 决策树学习\n        model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=10, oob_score=True)\n        model.fit(x_train, y_train)\n        importance = model.feature_importances_\n        for j in range(0,30,3):\n            print(feature[j], ':', importance[j], feature[j+1], ':', importance[j+1]\n                  , feature[j+2], ':', importance[j+2])\n\n\n        # 训练集上的预测结果\n        y_train_pred = model.predict(x_train)\n        acc_train = accuracy_score(y_train, y_train_pred)\n        y_test_pred = model.predict(x_test)\n        acc_test = accuracy_score(y_test, y_test_pred)\n        print('OOB Score:', model.oob_score_)\n        print('\\t训练集准确率: %.4f%%' % (100*acc_train))\n        print('\\t测试集准确率: %.4f%%\\n' % (100*acc_test))\n```\n\nimportance里面有影响系数，如下：\n\n![](importance1.jpg)\n\n![](importance2.jpg)\n\n可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。\n\nbut, 很不幸，前三项是y，不是x，大悲（）\n\n但我头铁死马当活马医生，直接硬上。\n\n```python\nx_prime = train2\ny = pd.Categorical(y2[3]).codes\nx_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n\nfeature_pairs = [list(range(0, 51))]\nfor i, pair in enumerate(feature_pairs):\n    # 准备数据\n    x_train = x_prime_train[pair]\n    x_test = x_prime_test[pair]\n\n    # 决策树学习\n    model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=7, oob_score=True)\n    model.fit(x_train, y_train)\n    y_pre = model.predict(pre2)\n    for j in range(len(y_pre)):\n        y_pre[j] = y_pre[j] + 1\n```\n\n稍微小改一下，其实是一样的，就是换一下x和y\n\n不过意料之中，准确率很低......只有50%-60%左右\n\n然后我又尝试了一下bp神经网络\n\n```python\n# 0. 超参数设置\nlr = 0.00002\nepochs = 300\nn_feature = 22\nn_hidden = 300\nn_output = 10\n\n# 1. 数据准备\ntrain1 = pd.read_csv('train1_.csv', header=None)\n# train2 = pd.read_csv('train2_.csv', header=None)\n\npre1 = pd.read_csv('pre1.csv', header=None)\n# pre2 = pd.read_csv('pre2.csv', header=None)\n\ny1 = pd.read_csv('f1_.csv', header=None)\n# y2 = pd.read_csv('f2_.csv', header=None)\n\n\nx_prime = train1\ny = pd.Categorical(y1[1]).codes\nx_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.2, random_state=22)\nx_train = np.array(x_p_train)\nx_pre = np.array(pre1)\nx_test = np.array(x_p_test)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.LongTensor(y_train)\nx_test = torch.FloatTensor(x_test)\ny_test = torch.LongTensor(y_test)\nx_pre = torch.FloatTensor(x_pre)\n\n\n# 2. 定义BP神经网络\nclass bpnnModel(torch.nn.Module):\n    def __init__(self, n_feature, n_hidden, n_output):\n        super(bpnnModel, self).__init__()\n        self.hidden = torch.nn.Linear(n_feature, n_hidden)  # 定义隐藏层网络\n        self.out = torch.nn.Linear(n_hidden, n_output)  # 定义输出层网络\n\n\n    def forward(self, x):\n        x = Fun.relu(self.hidden(x))  # 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh\n        out = Fun.softmax(self.out(x), dim=1)  # 输出层softmax激活函数\n        return out\n\n# 3. 定义优化器损失函数\nnet = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)  # 优化器选用随机梯度下降方式\nloss_func = torch.nn.CrossEntropyLoss()  # 对于多分类一般采用的交叉熵损失函数\n\n# 4. 训练数据\nloss_steps = np.zeros(epochs)\naccuracy_steps = np.zeros(epochs)\nfor epoch in range(epochs):\n    y_pred = net(x_train)  # 前向过程\n    loss = loss_func(y_pred, y_train)  # 输出与label对比\n    optimizer.zero_grad()  # 梯度清零\n    loss.backward()  # 反向传播\n    optimizer.step()  # 使用梯度优化器\n    loss_steps[epoch] = loss.item()  # 保存loss\nwith torch.no_grad():\n    y_pred = net(x_test)\n    y0 = net(x_pre)\n    y = torch.argmax(y0, dim=1)\n    correct = (torch.argmax(y_pred, dim=1) == y_test).type(torch.FloatTensor)\n    accuracy_steps[epoch] = correct.mean()\nprint(\"预测准确率\", accuracy_steps[-1])\n\n# 5 绘制损失函数和精度\nfig_name = '网络覆盖与信号强度(语音)'\nfontsize = 15\nfig, (ax1, ax2) = plt.subplots(2, figsize=(15, 12), sharex=True)\nax1.plot(accuracy_steps)\nax1.set_ylabel(\"test accuracy\", fontsize=fontsize)\nax1.set_title(fig_name, fontsize='xx-large')\nax2.plot(loss_steps)\nax2.set_ylabel(\"train loss\", fontsize=fontsize)\nax2.set_xlabel(\"epochs\", fontsize=fontsize)\nplt.tight_layout()\nplt.savefig(fig_name + '.png')\nplt.show()\nfor j in range(len(y)):\n    y[j] = y[j] + 1\ndata = pd.DataFrame(y)\ndata.to_csv('BP网络覆盖与信号强度(语音).csv', index=None)\n```\n\nemmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10...\n\n算了，就这样，直接交决策树，开摆。\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","source":"_posts/MathorCup.md","raw":"---\ntitle: 第三届MathorCup\ndate: 2023-01-29 10:42:55\ntags:\n - 竞赛\n---\n\n## 决策树\n\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom itertools import combinations\n\nif __name__ == \"__main__\":\n    mpl.rcParams['font.sans-serif'] = ['SimHei']\n    mpl.rcParams['axes.unicode_minus'] = False\n\n    feature = '网络覆盖与信号强度','语音通话清晰度','语音通话稳定性','是否遇到过网络问题','居民小区','办公室','高校','商业街','地铁','农村','高铁','其他，请注明','手机没有信号','有信号无法拨通','通话过程中突然中断','通话中有杂音、听不清、断断续续','串线','通话过程中一方听不见','其他，请注明.1','脱网次数','mos质差次数','未接通掉话次数','重定向次数','重定向驻留时长','ARPU（家庭宽带）','是否4G网络客户（本地剔除物联网）','当月ARPU','前3月ARPU','当月欠费金额','前第3个月欠费金额'\n    path = 'f1_.csv'  # 数据文件路径\n    data = pd.read_csv(path, header=None)\n    x_prime = data[list(range(1,31))]\n    y = pd.Categorical(data[0]).codes\n    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n    pairs = [c for c in combinations(range(1,31), 30)]\n    feature_pairs = []\n    num = len(pairs)\n    for i in range(num):\n        feature_pairs.append(list(pairs[i]))\n\n    for i, pair in enumerate(feature_pairs):\n        # 准备数据\n        x_train = x_prime_train[pair]\n        x_test = x_prime_test[pair]\n\n        # 决策树学习\n        model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=10, oob_score=True)\n        model.fit(x_train, y_train)\n        importance = model.feature_importances_\n        for j in range(0,30,3):\n            print(feature[j], ':', importance[j], feature[j+1], ':', importance[j+1]\n                  , feature[j+2], ':', importance[j+2])\n\n\n        # 训练集上的预测结果\n        y_train_pred = model.predict(x_train)\n        acc_train = accuracy_score(y_train, y_train_pred)\n        y_test_pred = model.predict(x_test)\n        acc_test = accuracy_score(y_test, y_test_pred)\n        print('OOB Score:', model.oob_score_)\n        print('\\t训练集准确率: %.4f%%' % (100*acc_train))\n        print('\\t测试集准确率: %.4f%%\\n' % (100*acc_test))\n```\n\nimportance里面有影响系数，如下：\n\n![](importance1.jpg)\n\n![](importance2.jpg)\n\n可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。\n\nbut, 很不幸，前三项是y，不是x，大悲（）\n\n但我头铁死马当活马医生，直接硬上。\n\n```python\nx_prime = train2\ny = pd.Categorical(y2[3]).codes\nx_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.3, random_state=0)\n\nfeature_pairs = [list(range(0, 51))]\nfor i, pair in enumerate(feature_pairs):\n    # 准备数据\n    x_train = x_prime_train[pair]\n    x_test = x_prime_test[pair]\n\n    # 决策树学习\n    model = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=7, oob_score=True)\n    model.fit(x_train, y_train)\n    y_pre = model.predict(pre2)\n    for j in range(len(y_pre)):\n        y_pre[j] = y_pre[j] + 1\n```\n\n稍微小改一下，其实是一样的，就是换一下x和y\n\n不过意料之中，准确率很低......只有50%-60%左右\n\n然后我又尝试了一下bp神经网络\n\n```python\n# 0. 超参数设置\nlr = 0.00002\nepochs = 300\nn_feature = 22\nn_hidden = 300\nn_output = 10\n\n# 1. 数据准备\ntrain1 = pd.read_csv('train1_.csv', header=None)\n# train2 = pd.read_csv('train2_.csv', header=None)\n\npre1 = pd.read_csv('pre1.csv', header=None)\n# pre2 = pd.read_csv('pre2.csv', header=None)\n\ny1 = pd.read_csv('f1_.csv', header=None)\n# y2 = pd.read_csv('f2_.csv', header=None)\n\n\nx_prime = train1\ny = pd.Categorical(y1[1]).codes\nx_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=0.2, random_state=22)\nx_train = np.array(x_p_train)\nx_pre = np.array(pre1)\nx_test = np.array(x_p_test)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.LongTensor(y_train)\nx_test = torch.FloatTensor(x_test)\ny_test = torch.LongTensor(y_test)\nx_pre = torch.FloatTensor(x_pre)\n\n\n# 2. 定义BP神经网络\nclass bpnnModel(torch.nn.Module):\n    def __init__(self, n_feature, n_hidden, n_output):\n        super(bpnnModel, self).__init__()\n        self.hidden = torch.nn.Linear(n_feature, n_hidden)  # 定义隐藏层网络\n        self.out = torch.nn.Linear(n_hidden, n_output)  # 定义输出层网络\n\n\n    def forward(self, x):\n        x = Fun.relu(self.hidden(x))  # 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh\n        out = Fun.softmax(self.out(x), dim=1)  # 输出层softmax激活函数\n        return out\n\n# 3. 定义优化器损失函数\nnet = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)\noptimizer = torch.optim.Adam(net.parameters(), lr=lr)  # 优化器选用随机梯度下降方式\nloss_func = torch.nn.CrossEntropyLoss()  # 对于多分类一般采用的交叉熵损失函数\n\n# 4. 训练数据\nloss_steps = np.zeros(epochs)\naccuracy_steps = np.zeros(epochs)\nfor epoch in range(epochs):\n    y_pred = net(x_train)  # 前向过程\n    loss = loss_func(y_pred, y_train)  # 输出与label对比\n    optimizer.zero_grad()  # 梯度清零\n    loss.backward()  # 反向传播\n    optimizer.step()  # 使用梯度优化器\n    loss_steps[epoch] = loss.item()  # 保存loss\nwith torch.no_grad():\n    y_pred = net(x_test)\n    y0 = net(x_pre)\n    y = torch.argmax(y0, dim=1)\n    correct = (torch.argmax(y_pred, dim=1) == y_test).type(torch.FloatTensor)\n    accuracy_steps[epoch] = correct.mean()\nprint(\"预测准确率\", accuracy_steps[-1])\n\n# 5 绘制损失函数和精度\nfig_name = '网络覆盖与信号强度(语音)'\nfontsize = 15\nfig, (ax1, ax2) = plt.subplots(2, figsize=(15, 12), sharex=True)\nax1.plot(accuracy_steps)\nax1.set_ylabel(\"test accuracy\", fontsize=fontsize)\nax1.set_title(fig_name, fontsize='xx-large')\nax2.plot(loss_steps)\nax2.set_ylabel(\"train loss\", fontsize=fontsize)\nax2.set_xlabel(\"epochs\", fontsize=fontsize)\nplt.tight_layout()\nplt.savefig(fig_name + '.png')\nplt.show()\nfor j in range(len(y)):\n    y[j] = y[j] + 1\ndata = pd.DataFrame(y)\ndata.to_csv('BP网络覆盖与信号强度(语音).csv', index=None)\n```\n\nemmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10...\n\n算了，就这样，直接交决策树，开摆。\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","slug":"MathorCup","published":1,"updated":"2023-01-29T03:03:48.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldgstqx1000044vf23hz1t51","content":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib <span class=\"keyword\">as</span> mpl</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    feature = <span class=\"string\">&#x27;网络覆盖与信号强度&#x27;</span>,<span class=\"string\">&#x27;语音通话清晰度&#x27;</span>,<span class=\"string\">&#x27;语音通话稳定性&#x27;</span>,<span class=\"string\">&#x27;是否遇到过网络问题&#x27;</span>,<span class=\"string\">&#x27;居民小区&#x27;</span>,<span class=\"string\">&#x27;办公室&#x27;</span>,<span class=\"string\">&#x27;高校&#x27;</span>,<span class=\"string\">&#x27;商业街&#x27;</span>,<span class=\"string\">&#x27;地铁&#x27;</span>,<span class=\"string\">&#x27;农村&#x27;</span>,<span class=\"string\">&#x27;高铁&#x27;</span>,<span class=\"string\">&#x27;其他，请注明&#x27;</span>,<span class=\"string\">&#x27;手机没有信号&#x27;</span>,<span class=\"string\">&#x27;有信号无法拨通&#x27;</span>,<span class=\"string\">&#x27;通话过程中突然中断&#x27;</span>,<span class=\"string\">&#x27;通话中有杂音、听不清、断断续续&#x27;</span>,<span class=\"string\">&#x27;串线&#x27;</span>,<span class=\"string\">&#x27;通话过程中一方听不见&#x27;</span>,<span class=\"string\">&#x27;其他，请注明.1&#x27;</span>,<span class=\"string\">&#x27;脱网次数&#x27;</span>,<span class=\"string\">&#x27;mos质差次数&#x27;</span>,<span class=\"string\">&#x27;未接通掉话次数&#x27;</span>,<span class=\"string\">&#x27;重定向次数&#x27;</span>,<span class=\"string\">&#x27;重定向驻留时长&#x27;</span>,<span class=\"string\">&#x27;ARPU（家庭宽带）&#x27;</span>,<span class=\"string\">&#x27;是否4G网络客户（本地剔除物联网）&#x27;</span>,<span class=\"string\">&#x27;当月ARPU&#x27;</span>,<span class=\"string\">&#x27;前3月ARPU&#x27;</span>,<span class=\"string\">&#x27;当月欠费金额&#x27;</span>,<span class=\"string\">&#x27;前第3个月欠费金额&#x27;</span></span><br><span class=\"line\">    path = <span class=\"string\">&#x27;f1_.csv&#x27;</span>  <span class=\"comment\"># 数据文件路径</span></span><br><span class=\"line\">    data = pd.read_csv(path, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    x_prime = data[<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>))]</span><br><span class=\"line\">    y = pd.Categorical(data[<span class=\"number\">0</span>]).codes</span><br><span class=\"line\">    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\">    pairs = [c <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> combinations(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>), <span class=\"number\">30</span>)]</span><br><span class=\"line\">    feature_pairs = []</span><br><span class=\"line\">    num = <span class=\"built_in\">len</span>(pairs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        feature_pairs.append(<span class=\"built_in\">list</span>(pairs[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">        <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">        x_train = x_prime_train[pair]</span><br><span class=\"line\">        x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">        model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">10</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        model.fit(x_train, y_train)</span><br><span class=\"line\">        importance = model.feature_importances_</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">30</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(feature[j], <span class=\"string\">&#x27;:&#x27;</span>, importance[j], feature[j+<span class=\"number\">1</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">                  , feature[j+<span class=\"number\">2</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练集上的预测结果</span></span><br><span class=\"line\">        y_train_pred = model.predict(x_train)</span><br><span class=\"line\">        acc_train = accuracy_score(y_train, y_train_pred)</span><br><span class=\"line\">        y_test_pred = model.predict(x_test)</span><br><span class=\"line\">        acc_test = accuracy_score(y_test, y_test_pred)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;OOB Score:&#x27;</span>, model.oob_score_)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t训练集准确率: %.4f%%&#x27;</span> % (<span class=\"number\">100</span>*acc_train))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t测试集准确率: %.4f%%\\n&#x27;</span> % (<span class=\"number\">100</span>*acc_test))</span><br></pre></td></tr></table></figure>\n\n<p>importance里面有影响系数，如下：</p>\n<p><img src=\"/2023/01/29/MathorCup/importance1.jpg\"></p>\n<p><img src=\"/2023/01/29/MathorCup/importance2.jpg\"></p>\n<p>可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。</p>\n<p>but, 很不幸，前三项是y，不是x，大悲（）</p>\n<p>但我头铁死马当活马医生，直接硬上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x_prime = train2</span><br><span class=\"line\">y = pd.Categorical(y2[<span class=\"number\">3</span>]).codes</span><br><span class=\"line\">x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_pairs = [<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">51</span>))]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">    <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">    x_train = x_prime_train[pair]</span><br><span class=\"line\">    x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">    model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">7</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    model.fit(x_train, y_train)</span><br><span class=\"line\">    y_pre = model.predict(pre2)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y_pre)):</span><br><span class=\"line\">        y_pre[j] = y_pre[j] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>稍微小改一下，其实是一样的，就是换一下x和y</p>\n<p>不过意料之中，准确率很低……只有50%-60%左右</p>\n<p>然后我又尝试了一下bp神经网络</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0. 超参数设置</span></span><br><span class=\"line\">lr = <span class=\"number\">0.00002</span></span><br><span class=\"line\">epochs = <span class=\"number\">300</span></span><br><span class=\"line\">n_feature = <span class=\"number\">22</span></span><br><span class=\"line\">n_hidden = <span class=\"number\">300</span></span><br><span class=\"line\">n_output = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 数据准备</span></span><br><span class=\"line\">train1 = pd.read_csv(<span class=\"string\">&#x27;train1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># train2 = pd.read_csv(&#x27;train2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">pre1 = pd.read_csv(<span class=\"string\">&#x27;pre1.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># pre2 = pd.read_csv(&#x27;pre2.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">y1 = pd.read_csv(<span class=\"string\">&#x27;f1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># y2 = pd.read_csv(&#x27;f2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x_prime = train1</span><br><span class=\"line\">y = pd.Categorical(y1[<span class=\"number\">1</span>]).codes</span><br><span class=\"line\">x_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">22</span>)</span><br><span class=\"line\">x_train = np.array(x_p_train)</span><br><span class=\"line\">x_pre = np.array(pre1)</span><br><span class=\"line\">x_test = np.array(x_p_test)</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = torch.FloatTensor(x_train)</span><br><span class=\"line\">y_train = torch.LongTensor(y_train)</span><br><span class=\"line\">x_test = torch.FloatTensor(x_test)</span><br><span class=\"line\">y_test = torch.LongTensor(y_test)</span><br><span class=\"line\">x_pre = torch.FloatTensor(x_pre)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 定义BP神经网络</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">bpnnModel</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, n_feature, n_hidden, n_output</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(bpnnModel, self).__init__()</span><br><span class=\"line\">        self.hidden = torch.nn.Linear(n_feature, n_hidden)  <span class=\"comment\"># 定义隐藏层网络</span></span><br><span class=\"line\">        self.out = torch.nn.Linear(n_hidden, n_output)  <span class=\"comment\"># 定义输出层网络</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = Fun.relu(self.hidden(x))  <span class=\"comment\"># 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh</span></span><br><span class=\"line\">        out = Fun.softmax(self.out(x), dim=<span class=\"number\">1</span>)  <span class=\"comment\"># 输出层softmax激活函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 定义优化器损失函数</span></span><br><span class=\"line\">net = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)</span><br><span class=\"line\">optimizer = torch.optim.Adam(net.parameters(), lr=lr)  <span class=\"comment\"># 优化器选用随机梯度下降方式</span></span><br><span class=\"line\">loss_func = torch.nn.CrossEntropyLoss()  <span class=\"comment\"># 对于多分类一般采用的交叉熵损失函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 训练数据</span></span><br><span class=\"line\">loss_steps = np.zeros(epochs)</span><br><span class=\"line\">accuracy_steps = np.zeros(epochs)</span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">    y_pred = net(x_train)  <span class=\"comment\"># 前向过程</span></span><br><span class=\"line\">    loss = loss_func(y_pred, y_train)  <span class=\"comment\"># 输出与label对比</span></span><br><span class=\"line\">    optimizer.zero_grad()  <span class=\"comment\"># 梯度清零</span></span><br><span class=\"line\">    loss.backward()  <span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">    optimizer.step()  <span class=\"comment\"># 使用梯度优化器</span></span><br><span class=\"line\">    loss_steps[epoch] = loss.item()  <span class=\"comment\"># 保存loss</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">    y_pred = net(x_test)</span><br><span class=\"line\">    y0 = net(x_pre)</span><br><span class=\"line\">    y = torch.argmax(y0, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">    correct = (torch.argmax(y_pred, dim=<span class=\"number\">1</span>) == y_test).<span class=\"built_in\">type</span>(torch.FloatTensor)</span><br><span class=\"line\">    accuracy_steps[epoch] = correct.mean()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;预测准确率&quot;</span>, accuracy_steps[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 绘制损失函数和精度</span></span><br><span class=\"line\">fig_name = <span class=\"string\">&#x27;网络覆盖与信号强度(语音)&#x27;</span></span><br><span class=\"line\">fontsize = <span class=\"number\">15</span></span><br><span class=\"line\">fig, (ax1, ax2) = plt.subplots(<span class=\"number\">2</span>, figsize=(<span class=\"number\">15</span>, <span class=\"number\">12</span>), sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">ax1.plot(accuracy_steps)</span><br><span class=\"line\">ax1.set_ylabel(<span class=\"string\">&quot;test accuracy&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax1.set_title(fig_name, fontsize=<span class=\"string\">&#x27;xx-large&#x27;</span>)</span><br><span class=\"line\">ax2.plot(loss_steps)</span><br><span class=\"line\">ax2.set_ylabel(<span class=\"string\">&quot;train loss&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax2.set_xlabel(<span class=\"string\">&quot;epochs&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">plt.tight_layout()</span><br><span class=\"line\">plt.savefig(fig_name + <span class=\"string\">&#x27;.png&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y)):</span><br><span class=\"line\">    y[j] = y[j] + <span class=\"number\">1</span></span><br><span class=\"line\">data = pd.DataFrame(y)</span><br><span class=\"line\">data.to_csv(<span class=\"string\">&#x27;BP网络覆盖与信号强度(语音).csv&#x27;</span>, index=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>emmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10…</p>\n<p>算了，就这样，直接交决策树，开摆。</p>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>","site":{"data":{"link":[{"class_name":"开源平台","class_desc":"好用的开源项目","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"小沈同学","link":"https://blog.museday.top/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"为我搭建博客提供帮助"},{"name":"豪哥","link":"http://Charliechen114514.github.io","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"好兄弟，冲冲冲!"}]}]}},"cover":false,"excerpt":"","more":"<h2 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib <span class=\"keyword\">as</span> mpl</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]</span><br><span class=\"line\">    mpl.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    feature = <span class=\"string\">&#x27;网络覆盖与信号强度&#x27;</span>,<span class=\"string\">&#x27;语音通话清晰度&#x27;</span>,<span class=\"string\">&#x27;语音通话稳定性&#x27;</span>,<span class=\"string\">&#x27;是否遇到过网络问题&#x27;</span>,<span class=\"string\">&#x27;居民小区&#x27;</span>,<span class=\"string\">&#x27;办公室&#x27;</span>,<span class=\"string\">&#x27;高校&#x27;</span>,<span class=\"string\">&#x27;商业街&#x27;</span>,<span class=\"string\">&#x27;地铁&#x27;</span>,<span class=\"string\">&#x27;农村&#x27;</span>,<span class=\"string\">&#x27;高铁&#x27;</span>,<span class=\"string\">&#x27;其他，请注明&#x27;</span>,<span class=\"string\">&#x27;手机没有信号&#x27;</span>,<span class=\"string\">&#x27;有信号无法拨通&#x27;</span>,<span class=\"string\">&#x27;通话过程中突然中断&#x27;</span>,<span class=\"string\">&#x27;通话中有杂音、听不清、断断续续&#x27;</span>,<span class=\"string\">&#x27;串线&#x27;</span>,<span class=\"string\">&#x27;通话过程中一方听不见&#x27;</span>,<span class=\"string\">&#x27;其他，请注明.1&#x27;</span>,<span class=\"string\">&#x27;脱网次数&#x27;</span>,<span class=\"string\">&#x27;mos质差次数&#x27;</span>,<span class=\"string\">&#x27;未接通掉话次数&#x27;</span>,<span class=\"string\">&#x27;重定向次数&#x27;</span>,<span class=\"string\">&#x27;重定向驻留时长&#x27;</span>,<span class=\"string\">&#x27;ARPU（家庭宽带）&#x27;</span>,<span class=\"string\">&#x27;是否4G网络客户（本地剔除物联网）&#x27;</span>,<span class=\"string\">&#x27;当月ARPU&#x27;</span>,<span class=\"string\">&#x27;前3月ARPU&#x27;</span>,<span class=\"string\">&#x27;当月欠费金额&#x27;</span>,<span class=\"string\">&#x27;前第3个月欠费金额&#x27;</span></span><br><span class=\"line\">    path = <span class=\"string\">&#x27;f1_.csv&#x27;</span>  <span class=\"comment\"># 数据文件路径</span></span><br><span class=\"line\">    data = pd.read_csv(path, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    x_prime = data[<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>))]</span><br><span class=\"line\">    y = pd.Categorical(data[<span class=\"number\">0</span>]).codes</span><br><span class=\"line\">    x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\">    pairs = [c <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> combinations(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">31</span>), <span class=\"number\">30</span>)]</span><br><span class=\"line\">    feature_pairs = []</span><br><span class=\"line\">    num = <span class=\"built_in\">len</span>(pairs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        feature_pairs.append(<span class=\"built_in\">list</span>(pairs[i]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">        <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">        x_train = x_prime_train[pair]</span><br><span class=\"line\">        x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">        model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">10</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        model.fit(x_train, y_train)</span><br><span class=\"line\">        importance = model.feature_importances_</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">30</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(feature[j], <span class=\"string\">&#x27;:&#x27;</span>, importance[j], feature[j+<span class=\"number\">1</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">                  , feature[j+<span class=\"number\">2</span>], <span class=\"string\">&#x27;:&#x27;</span>, importance[j+<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 训练集上的预测结果</span></span><br><span class=\"line\">        y_train_pred = model.predict(x_train)</span><br><span class=\"line\">        acc_train = accuracy_score(y_train, y_train_pred)</span><br><span class=\"line\">        y_test_pred = model.predict(x_test)</span><br><span class=\"line\">        acc_test = accuracy_score(y_test, y_test_pred)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;OOB Score:&#x27;</span>, model.oob_score_)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t训练集准确率: %.4f%%&#x27;</span> % (<span class=\"number\">100</span>*acc_train))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\t测试集准确率: %.4f%%\\n&#x27;</span> % (<span class=\"number\">100</span>*acc_test))</span><br></pre></td></tr></table></figure>\n\n<p>importance里面有影响系数，如下：</p>\n<p><img src=\"/2023/01/29/MathorCup/importance1.jpg\"></p>\n<p><img src=\"/2023/01/29/MathorCup/importance2.jpg\"></p>\n<p>可以看出除了前三项对整体满意度的影响较大，别的项对其影响很小。</p>\n<p>but, 很不幸，前三项是y，不是x，大悲（）</p>\n<p>但我头铁死马当活马医生，直接硬上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x_prime = train2</span><br><span class=\"line\">y = pd.Categorical(y2[<span class=\"number\">3</span>]).codes</span><br><span class=\"line\">x_prime_train, x_prime_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">feature_pairs = [<span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">51</span>))]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, pair <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(feature_pairs):</span><br><span class=\"line\">    <span class=\"comment\"># 准备数据</span></span><br><span class=\"line\">    x_train = x_prime_train[pair]</span><br><span class=\"line\">    x_test = x_prime_test[pair]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 决策树学习</span></span><br><span class=\"line\">    model = RandomForestClassifier(n_estimators=<span class=\"number\">100</span>, criterion=<span class=\"string\">&#x27;entropy&#x27;</span>, max_depth=<span class=\"number\">7</span>, oob_score=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    model.fit(x_train, y_train)</span><br><span class=\"line\">    y_pre = model.predict(pre2)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y_pre)):</span><br><span class=\"line\">        y_pre[j] = y_pre[j] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>稍微小改一下，其实是一样的，就是换一下x和y</p>\n<p>不过意料之中，准确率很低……只有50%-60%左右</p>\n<p>然后我又尝试了一下bp神经网络</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0. 超参数设置</span></span><br><span class=\"line\">lr = <span class=\"number\">0.00002</span></span><br><span class=\"line\">epochs = <span class=\"number\">300</span></span><br><span class=\"line\">n_feature = <span class=\"number\">22</span></span><br><span class=\"line\">n_hidden = <span class=\"number\">300</span></span><br><span class=\"line\">n_output = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 数据准备</span></span><br><span class=\"line\">train1 = pd.read_csv(<span class=\"string\">&#x27;train1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># train2 = pd.read_csv(&#x27;train2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">pre1 = pd.read_csv(<span class=\"string\">&#x27;pre1.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># pre2 = pd.read_csv(&#x27;pre2.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\">y1 = pd.read_csv(<span class=\"string\">&#x27;f1_.csv&#x27;</span>, header=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># y2 = pd.read_csv(&#x27;f2_.csv&#x27;, header=None)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x_prime = train1</span><br><span class=\"line\">y = pd.Categorical(y1[<span class=\"number\">1</span>]).codes</span><br><span class=\"line\">x_p_train, x_p_test, y_train, y_test = train_test_split(x_prime, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">22</span>)</span><br><span class=\"line\">x_train = np.array(x_p_train)</span><br><span class=\"line\">x_pre = np.array(pre1)</span><br><span class=\"line\">x_test = np.array(x_p_test)</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = torch.FloatTensor(x_train)</span><br><span class=\"line\">y_train = torch.LongTensor(y_train)</span><br><span class=\"line\">x_test = torch.FloatTensor(x_test)</span><br><span class=\"line\">y_test = torch.LongTensor(y_test)</span><br><span class=\"line\">x_pre = torch.FloatTensor(x_pre)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 定义BP神经网络</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">bpnnModel</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, n_feature, n_hidden, n_output</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(bpnnModel, self).__init__()</span><br><span class=\"line\">        self.hidden = torch.nn.Linear(n_feature, n_hidden)  <span class=\"comment\"># 定义隐藏层网络</span></span><br><span class=\"line\">        self.out = torch.nn.Linear(n_hidden, n_output)  <span class=\"comment\"># 定义输出层网络</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        x = Fun.relu(self.hidden(x))  <span class=\"comment\"># 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh</span></span><br><span class=\"line\">        out = Fun.softmax(self.out(x), dim=<span class=\"number\">1</span>)  <span class=\"comment\"># 输出层softmax激活函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 定义优化器损失函数</span></span><br><span class=\"line\">net = bpnnModel(n_feature=n_feature, n_hidden=n_hidden, n_output=n_output)</span><br><span class=\"line\">optimizer = torch.optim.Adam(net.parameters(), lr=lr)  <span class=\"comment\"># 优化器选用随机梯度下降方式</span></span><br><span class=\"line\">loss_func = torch.nn.CrossEntropyLoss()  <span class=\"comment\"># 对于多分类一般采用的交叉熵损失函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 训练数据</span></span><br><span class=\"line\">loss_steps = np.zeros(epochs)</span><br><span class=\"line\">accuracy_steps = np.zeros(epochs)</span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">    y_pred = net(x_train)  <span class=\"comment\"># 前向过程</span></span><br><span class=\"line\">    loss = loss_func(y_pred, y_train)  <span class=\"comment\"># 输出与label对比</span></span><br><span class=\"line\">    optimizer.zero_grad()  <span class=\"comment\"># 梯度清零</span></span><br><span class=\"line\">    loss.backward()  <span class=\"comment\"># 反向传播</span></span><br><span class=\"line\">    optimizer.step()  <span class=\"comment\"># 使用梯度优化器</span></span><br><span class=\"line\">    loss_steps[epoch] = loss.item()  <span class=\"comment\"># 保存loss</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">    y_pred = net(x_test)</span><br><span class=\"line\">    y0 = net(x_pre)</span><br><span class=\"line\">    y = torch.argmax(y0, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">    correct = (torch.argmax(y_pred, dim=<span class=\"number\">1</span>) == y_test).<span class=\"built_in\">type</span>(torch.FloatTensor)</span><br><span class=\"line\">    accuracy_steps[epoch] = correct.mean()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;预测准确率&quot;</span>, accuracy_steps[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 绘制损失函数和精度</span></span><br><span class=\"line\">fig_name = <span class=\"string\">&#x27;网络覆盖与信号强度(语音)&#x27;</span></span><br><span class=\"line\">fontsize = <span class=\"number\">15</span></span><br><span class=\"line\">fig, (ax1, ax2) = plt.subplots(<span class=\"number\">2</span>, figsize=(<span class=\"number\">15</span>, <span class=\"number\">12</span>), sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">ax1.plot(accuracy_steps)</span><br><span class=\"line\">ax1.set_ylabel(<span class=\"string\">&quot;test accuracy&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax1.set_title(fig_name, fontsize=<span class=\"string\">&#x27;xx-large&#x27;</span>)</span><br><span class=\"line\">ax2.plot(loss_steps)</span><br><span class=\"line\">ax2.set_ylabel(<span class=\"string\">&quot;train loss&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">ax2.set_xlabel(<span class=\"string\">&quot;epochs&quot;</span>, fontsize=fontsize)</span><br><span class=\"line\">plt.tight_layout()</span><br><span class=\"line\">plt.savefig(fig_name + <span class=\"string\">&#x27;.png&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y)):</span><br><span class=\"line\">    y[j] = y[j] + <span class=\"number\">1</span></span><br><span class=\"line\">data = pd.DataFrame(y)</span><br><span class=\"line\">data.to_csv(<span class=\"string\">&#x27;BP网络覆盖与信号强度(语音).csv&#x27;</span>, index=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>emmm, 虽然准确率稍微提高了5-10个百分点，但是过拟合太严重，结果评分都是10…</p>\n<p>算了，就这样，直接交决策树，开摆。</p>\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"changshanzhao/MathorCup\"\n        data-repo-id=\"R_kgDOI2ig8w\"\n        data-category-id=\"DIC_kwDOI2ig884CT3Rf\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>"}],"PostAsset":[{"_id":"source/_posts/images-test/touxiang.jpg","slug":"touxiang.jpg","post":"cldfk5i0q0003h4vf818ydku6","modified":0,"renderable":0},{"_id":"source/_posts/MathorCup/importance1.jpg","post":"cldgstqx1000044vf23hz1t51","slug":"importance1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MathorCup/importance2.jpg","post":"cldgstqx1000044vf23hz1t51","slug":"importance2.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cldfk5i0m0001h4vf07u6ajix","category_id":"cldfk5i0s0004h4vf9sj68qak","_id":"cldfk5i0w000dh4vf2d0w6yrb"},{"post_id":"cldfk5i14000fh4vf7c2o49cn","category_id":"cldfk5i16000gh4vfga3df1m1","_id":"cldfk5i18000jh4vfb042dvl0"}],"PostTag":[{"post_id":"cldfk5i0m0001h4vf07u6ajix","tag_id":"cldfk5i0t0005h4vf4z7b2dh7","_id":"cldfk5i0v000ah4vf8kp04l5i"},{"post_id":"cldfk5i0q0003h4vf818ydku6","tag_id":"cldfk5i0v0009h4vfak1khta4","_id":"cldfk5i0w000eh4vf74ae0r1z"},{"post_id":"cldfk5i14000fh4vf7c2o49cn","tag_id":"cldfk5i17000hh4vfannb0jmr","_id":"cldfk5i19000lh4vf5v4igoy0"},{"post_id":"cldfk5i14000fh4vf7c2o49cn","tag_id":"cldfk5i17000ih4vf9fk1g2ha","_id":"cldfk5i19000mh4vffgxb0kay"},{"post_id":"cldfk5i14000fh4vf7c2o49cn","tag_id":"cldfk5i19000kh4vf7kci4har","_id":"cldfk5i19000nh4vf0jdedcmy"},{"post_id":"cldgstqx1000044vf23hz1t51","tag_id":"cldfk5i19000kh4vf7kci4har","_id":"cldgstqx6000144vfgsaj2kk5"}],"Tag":[{"name":"博客搭建","_id":"cldfk5i0t0005h4vf4z7b2dh7"},{"name":"测试","_id":"cldfk5i0v0009h4vfak1khta4"},{"name":"总结","_id":"cldfk5i17000hh4vfannb0jmr"},{"name":"项目","_id":"cldfk5i17000ih4vf9fk1g2ha"},{"name":"竞赛","_id":"cldfk5i19000kh4vf7kci4har"}]}}